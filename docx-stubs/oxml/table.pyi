"""
This type stub file was generated by pyright.
"""

from .xmlchemy import BaseOxmlElement

"""Custom element classes for tables"""
class CT_Height(BaseOxmlElement):
    """
    Used for ``<w:trHeight>`` to specify a row height and row height rule.
    """
    val = ...
    hRule = ...


class CT_Row(BaseOxmlElement):
    """
    ``<w:tr>`` element
    """
    tblPrEx = ...
    trPr = ...
    tc = ...
    def tc_at_grid_col(self, idx):
        """
        The ``<w:tc>`` element appearing at grid column *idx*. Raises
        |ValueError| if no ``w:tc`` element begins at that grid column.
        """
        ...
    
    @property
    def tr_idx(self):
        """
        The index of this ``<w:tr>`` element within its parent ``<w:tbl>``
        element.
        """
        ...
    
    @property
    def trHeight_hRule(self): # -> None:
        """
        Return the value of `w:trPr/w:trHeight@w:hRule`, or |None| if not
        present.
        """
        ...
    
    @trHeight_hRule.setter
    def trHeight_hRule(self, value): # -> None:
        ...
    
    @property
    def trHeight_val(self): # -> None:
        """
        Return the value of `w:trPr/w:trHeight@w:val`, or |None| if not
        present.
        """
        ...
    
    @trHeight_val.setter
    def trHeight_val(self, value): # -> None:
        ...
    


class CT_Tbl(BaseOxmlElement):
    """
    ``<w:tbl>`` element
    """
    tblPr = ...
    tblGrid = ...
    tr = ...
    @property
    def bidiVisual_val(self): # -> None:
        """
        Value of `w:tblPr/w:bidiVisual/@w:val` or |None| if not present.
        Controls whether table cells are displayed right-to-left or
        left-to-right.
        """
        ...
    
    @bidiVisual_val.setter
    def bidiVisual_val(self, value): # -> None:
        ...
    
    @property
    def col_count(self): # -> int:
        """
        The number of grid columns in this table.
        """
        ...
    
    def iter_tcs(self): # -> Generator[Unknown, Any, None]:
        """
        Generate each of the `w:tc` elements in this table, left to right and
        top to bottom. Each cell in the first row is generated, followed by
        each cell in the second row, etc.
        """
        ...
    
    @classmethod
    def new_tbl(cls, rows, cols, width):
        """
        Return a new `w:tbl` element having *rows* rows and *cols* columns
        with *width* distributed evenly between the columns.
        """
        ...
    
    @property
    def tblStyle_val(self): # -> None:
        """
        Value of `w:tblPr/w:tblStyle/@w:val` (a table style id) or |None| if
        not present.
        """
        ...
    
    @tblStyle_val.setter
    def tblStyle_val(self, styleId): # -> None:
        """
        Set the value of `w:tblPr/w:tblStyle/@w:val` (a table style id) to
        *styleId*. If *styleId* is None, remove the `w:tblStyle` element.
        """
        ...
    


class CT_TblGrid(BaseOxmlElement):
    """
    ``<w:tblGrid>`` element, child of ``<w:tbl>``, holds ``<w:gridCol>``
    elements that define column count, width, etc.
    """
    gridCol = ...


class CT_TblGridCol(BaseOxmlElement):
    """
    ``<w:gridCol>`` element, child of ``<w:tblGrid>``, defines a table
    column.
    """
    w = ...
    @property
    def gridCol_idx(self):
        """
        The index of this ``<w:gridCol>`` element within its parent
        ``<w:tblGrid>`` element.
        """
        ...
    


class CT_TblLayoutType(BaseOxmlElement):
    """
    ``<w:tblLayout>`` element, specifying whether column widths are fixed or
    can be automatically adjusted based on content.
    """
    type = ...


class CT_TblPr(BaseOxmlElement):
    """
    ``<w:tblPr>`` element, child of ``<w:tbl>``, holds child elements that
    define table properties such as style and borders.
    """
    _tag_seq = ...
    tblStyle = ...
    bidiVisual = ...
    jc = ...
    tblLayout = ...
    @property
    def alignment(self): # -> None:
        """
        Member of :ref:`WdRowAlignment` enumeration or |None|, based on the
        contents of the `w:val` attribute of `./w:jc`. |None| if no `w:jc`
        element is present.
        """
        ...
    
    @alignment.setter
    def alignment(self, value): # -> None:
        ...
    
    @property
    def autofit(self): # -> bool:
        """
        Return |False| if there is a ``<w:tblLayout>`` child with ``w:type``
        attribute set to ``'fixed'``. Otherwise return |True|.
        """
        ...
    
    @autofit.setter
    def autofit(self, value): # -> None:
        ...
    
    @property
    def style(self): # -> None:
        """
        Return the value of the ``val`` attribute of the ``<w:tblStyle>``
        child or |None| if not present.
        """
        ...
    
    @style.setter
    def style(self, value): # -> None:
        ...
    


class CT_TblWidth(BaseOxmlElement):
    """
    Used for ``<w:tblW>`` and ``<w:tcW>`` elements and many others, to
    specify a table-related width.
    """
    w = ...
    type = ...
    @property
    def width(self): # -> Twips | None:
        """
        Return the EMU length value represented by the combined ``w:w`` and
        ``w:type`` attributes.
        """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class CT_Tc(BaseOxmlElement):
    """`w:tc` table cell element"""
    tcPr = ...
    p = ...
    tbl = ...
    @property
    def bottom(self):
        """
        The row index that marks the bottom extent of the vertical span of
        this cell. This is one greater than the index of the bottom-most row
        of the span, similar to how a slice of the cell's rows would be
        specified.
        """
        ...
    
    def clear_content(self): # -> None:
        """
        Remove all content child elements, preserving the ``<w:tcPr>``
        element if present. Note that this leaves the ``<w:tc>`` element in
        an invalid state because it doesn't contain at least one block-level
        element. It's up to the caller to add a ``<w:p>``child element as the
        last content element.
        """
        ...
    
    @property
    def grid_span(self): # -> Literal[1]:
        """
        The integer number of columns this cell spans. Determined by
        ./w:tcPr/w:gridSpan/@val, it defaults to 1.
        """
        ...
    
    @grid_span.setter
    def grid_span(self, value): # -> None:
        ...
    
    def iter_block_items(self): # -> Generator[Unknown, Any, None]:
        """
        Generate a reference to each of the block-level content elements in
        this cell, in the order they appear.
        """
        ...
    
    @property
    def left(self): # -> int:
        """
        The grid column index at which this ``<w:tc>`` element appears.
        """
        ...
    
    def merge(self, other_tc):
        """
        Return the top-left ``<w:tc>`` element of a new span formed by
        merging the rectangular region defined by using this tc element and
        *other_tc* as diagonal corners.
        """
        ...
    
    @classmethod
    def new(cls):
        """
        Return a new ``<w:tc>`` element, containing an empty paragraph as the
        required EG_BlockLevelElt.
        """
        ...
    
    @property
    def right(self): # -> int:
        """
        The grid column index that marks the right-side extent of the
        horizontal span of this cell. This is one greater than the index of
        the right-most column of the span, similar to how a slice of the
        cell's columns would be specified.
        """
        ...
    
    @property
    def top(self):
        """
        The top-most row index in the vertical span of this cell.
        """
        ...
    
    @property
    def vMerge(self): # -> None:
        """
        The value of the ./w:tcPr/w:vMerge/@val attribute, or |None| if the
        w:vMerge element is not present.
        """
        ...
    
    @vMerge.setter
    def vMerge(self, value): # -> None:
        ...
    
    @property
    def width(self): # -> None:
        """
        Return the EMU length value represented in the ``./w:tcPr/w:tcW``
        child element or |None| if not present.
        """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class CT_TcPr(BaseOxmlElement):
    """
    ``<w:tcPr>`` element, defining table cell properties
    """
    _tag_seq = ...
    tcW = ...
    gridSpan = ...
    vMerge = ...
    vAlign = ...
    @property
    def grid_span(self): # -> Literal[1]:
        """
        The integer number of columns this cell spans. Determined by
        ./w:gridSpan/@val, it defaults to 1.
        """
        ...
    
    @grid_span.setter
    def grid_span(self, value): # -> None:
        ...
    
    @property
    def vAlign_val(self): # -> None:
        """Value of `w:val` attribute on  `w:vAlign` child.

        Value is |None| if `w:vAlign` child is not present. The `w:val`
        attribute on `w:vAlign` is required.
        """
        ...
    
    @vAlign_val.setter
    def vAlign_val(self, value): # -> None:
        ...
    
    @property
    def vMerge_val(self): # -> None:
        """
        The value of the ./w:vMerge/@val attribute, or |None| if the
        w:vMerge element is not present.
        """
        ...
    
    @vMerge_val.setter
    def vMerge_val(self, value): # -> None:
        ...
    
    @property
    def width(self): # -> None:
        """
        Return the EMU length value represented in the ``<w:tcW>`` child
        element or |None| if not present or its type is not 'dxa'.
        """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class CT_TrPr(BaseOxmlElement):
    """
    ``<w:trPr>`` element, defining table row properties
    """
    _tag_seq = ...
    trHeight = ...
    @property
    def trHeight_hRule(self): # -> None:
        """
        Return the value of `w:trHeight@w:hRule`, or |None| if not present.
        """
        ...
    
    @trHeight_hRule.setter
    def trHeight_hRule(self, value): # -> None:
        ...
    
    @property
    def trHeight_val(self): # -> None:
        """
        Return the value of `w:trHeight@w:val`, or |None| if not present.
        """
        ...
    
    @trHeight_val.setter
    def trHeight_val(self, value): # -> None:
        ...
    


class CT_VerticalJc(BaseOxmlElement):
    """`w:vAlign` element, specifying vertical alignment of cell."""
    val = ...


class CT_VMerge(BaseOxmlElement):
    """
    ``<w:vMerge>`` element, specifying vertical merging behavior of a cell.
    """
    val = ...


