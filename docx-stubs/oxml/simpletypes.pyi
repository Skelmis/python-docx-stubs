"""
This type stub file was generated by pyright.
"""

"""
Simple type classes, providing validation and format translation for values
stored in XML element attributes. Naming generally corresponds to the simple
type in the associated XML schema.
"""
class BaseSimpleType:
    @classmethod
    def from_xml(cls, str_value):
        ...
    
    @classmethod
    def to_xml(cls, value):
        ...
    
    @classmethod
    def validate_int(cls, value): # -> None:
        ...
    
    @classmethod
    def validate_int_in_range(cls, value, min_inclusive, max_inclusive): # -> None:
        ...
    
    @classmethod
    def validate_string(cls, value): # -> str:
        ...
    


class BaseIntType(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> int:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class BaseStringType(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value):
        ...
    
    @classmethod
    def convert_to_xml(cls, value):
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class BaseStringEnumerationType(BaseStringType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdAnyUri(BaseStringType):
    """
    There's a regular expression this is supposed to meet but so far thinking
    spending cycles on validating wouldn't be worth it for the number of
    programming errors it would catch.
    """
    ...


class XsdBoolean(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> bool:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdId(BaseStringType):
    """
    String that must begin with a letter or underscore and cannot contain any
    colons. Not fully validated because not used in external API.
    """
    ...


class XsdInt(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdLong(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdString(BaseStringType):
    ...


class XsdStringEnumeration(BaseStringEnumerationType):
    """
    Set of enumerated xsd:string values.
    """
    ...


class XsdToken(BaseStringType):
    """
    xsd:string with whitespace collapsing, e.g. multiple spaces reduced to
    one, leading and trailing space stripped.
    """
    ...


class XsdUnsignedInt(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class XsdUnsignedLong(BaseIntType):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_BrClear(XsdString):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_BrType(XsdString):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_Coordinate(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Emu:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_CoordinateUnqualified(XsdLong):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_DecimalNumber(XsdInt):
    ...


class ST_DrawingElementId(XsdUnsignedInt):
    ...


class ST_HexColor(BaseStringType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> RGBColor | Literal['auto']:
        ...
    
    @classmethod
    def convert_to_xml(cls, value):
        """
        Keep alpha hex numerals all uppercase just for consistency.
        """
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_HexColorAuto(XsdStringEnumeration):
    """
    Value for `w:color/[@val="auto"] attribute setting
    """
    AUTO = ...
    _members = ...


class ST_HpsMeasure(XsdUnsignedLong):
    """
    Half-point measure, e.g. 24.0 represents 12.0 points.
    """
    @classmethod
    def convert_from_xml(cls, str_value): # -> Emu | Pt:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    


class ST_Merge(XsdStringEnumeration):
    """
    Valid values for <w:xMerge val=""> attribute
    """
    CONTINUE = ...
    RESTART = ...
    _members = ...


class ST_OnOff(XsdBoolean):
    @classmethod
    def convert_from_xml(cls, str_value): # -> bool:
        ...
    


class ST_PositiveCoordinate(XsdLong):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Emu:
        ...
    
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_RelationshipId(XsdString):
    ...


class ST_SignedTwipsMeasure(XsdInt):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Emu | Twips:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    


class ST_String(XsdString):
    ...


class ST_TblLayoutType(XsdString):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TblWidth(XsdString):
    @classmethod
    def validate(cls, value): # -> None:
        ...
    


class ST_TwipsMeasure(XsdUnsignedLong):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Emu | Twips:
        ...
    
    @classmethod
    def convert_to_xml(cls, value): # -> str:
        ...
    


class ST_UniversalMeasure(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): # -> Emu:
        ...
    


class ST_VerticalAlignRun(XsdStringEnumeration):
    """
    Valid values for `w:vertAlign/@val`.
    """
    BASELINE = ...
    SUPERSCRIPT = ...
    SUBSCRIPT = ...
    _members = ...


