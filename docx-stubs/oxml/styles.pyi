"""
This type stub file was generated by pyright.
"""

from .xmlchemy import BaseOxmlElement

"""
Custom element classes related to the styles part
"""
def styleId_from_name(name): # -> str:
    """
    Return the style id corresponding to *name*, taking into account
    special-case names such as 'Heading 1'.
    """
    ...

class CT_LatentStyles(BaseOxmlElement):
    """
    `w:latentStyles` element, defining behavior defaults for latent styles
    and containing `w:lsdException` child elements that each override those
    defaults for a named latent style.
    """
    lsdException = ...
    count = ...
    defLockedState = ...
    defQFormat = ...
    defSemiHidden = ...
    defUIPriority = ...
    defUnhideWhenUsed = ...
    def bool_prop(self, attr_name): # -> Any | Literal[False]:
        """
        Return the boolean value of the attribute having *attr_name*, or
        |False| if not present.
        """
        ...
    
    def get_by_name(self, name): # -> None:
        """
        Return the `w:lsdException` child having *name*, or |None| if not
        found.
        """
        ...
    
    def set_bool_prop(self, attr_name, value): # -> None:
        """
        Set the on/off attribute having *attr_name* to *value*.
        """
        ...
    


class CT_LsdException(BaseOxmlElement):
    """
    ``<w:lsdException>`` element, defining override visibility behaviors for
    a named latent style.
    """
    locked = ...
    name = ...
    qFormat = ...
    semiHidden = ...
    uiPriority = ...
    unhideWhenUsed = ...
    def delete(self): # -> None:
        """
        Remove this `w:lsdException` element from the XML document.
        """
        ...
    
    def on_off_prop(self, attr_name): # -> Any:
        """
        Return the boolean value of the attribute having *attr_name*, or
        |None| if not present.
        """
        ...
    
    def set_on_off_prop(self, attr_name, value): # -> None:
        """
        Set the on/off attribute having *attr_name* to *value*.
        """
        ...
    


class CT_Style(BaseOxmlElement):
    """
    A ``<w:style>`` element, representing a style definition
    """
    _tag_seq = ...
    name = ...
    basedOn = ...
    next = ...
    uiPriority = ...
    semiHidden = ...
    unhideWhenUsed = ...
    qFormat = ...
    locked = ...
    pPr = ...
    rPr = ...
    type = ...
    styleId = ...
    default = ...
    customStyle = ...
    @property
    def basedOn_val(self): # -> None:
        """
        Value of `w:basedOn/@w:val` or |None| if not present.
        """
        ...
    
    @basedOn_val.setter
    def basedOn_val(self, value): # -> None:
        ...
    
    @property
    def base_style(self): # -> None:
        """
        Sibling CT_Style element this style is based on or |None| if no base
        style or base style not found.
        """
        ...
    
    def delete(self): # -> None:
        """
        Remove this `w:style` element from its parent `w:styles` element.
        """
        ...
    
    @property
    def locked_val(self): # -> Literal[False]:
        """
        Value of `w:locked/@w:val` or |False| if not present.
        """
        ...
    
    @locked_val.setter
    def locked_val(self, value): # -> None:
        ...
    
    @property
    def name_val(self): # -> None:
        """
        Value of ``<w:name>`` child or |None| if not present.
        """
        ...
    
    @name_val.setter
    def name_val(self, value): # -> None:
        ...
    
    @property
    def next_style(self): # -> None:
        """
        Sibling CT_Style element identified by the value of `w:name/@w:val`
        or |None| if no value is present or no style with that style id
        is found.
        """
        ...
    
    @property
    def qFormat_val(self): # -> Literal[False]:
        """
        Value of `w:qFormat/@w:val` or |False| if not present.
        """
        ...
    
    @qFormat_val.setter
    def qFormat_val(self, value): # -> None:
        ...
    
    @property
    def semiHidden_val(self): # -> Literal[False]:
        """
        Value of ``<w:semiHidden>`` child or |False| if not present.
        """
        ...
    
    @semiHidden_val.setter
    def semiHidden_val(self, value): # -> None:
        ...
    
    @property
    def uiPriority_val(self): # -> None:
        """
        Value of ``<w:uiPriority>`` child or |None| if not present.
        """
        ...
    
    @uiPriority_val.setter
    def uiPriority_val(self, value): # -> None:
        ...
    
    @property
    def unhideWhenUsed_val(self): # -> Literal[False]:
        """
        Value of `w:unhideWhenUsed/@w:val` or |False| if not present.
        """
        ...
    
    @unhideWhenUsed_val.setter
    def unhideWhenUsed_val(self, value): # -> None:
        ...
    


class CT_Styles(BaseOxmlElement):
    """
    ``<w:styles>`` element, the root element of a styles part, i.e.
    styles.xml
    """
    _tag_seq = ...
    latentStyles = ...
    style = ...
    def add_style_of_type(self, name, style_type, builtin):
        """
        Return a newly added `w:style` element having *name* and
        *style_type*. `w:style/@customStyle` is set based on the value of
        *builtin*.
        """
        ...
    
    def default_for(self, style_type): # -> None:
        """
        Return `w:style[@w:type="*{style_type}*][-1]` or |None| if not found.
        """
        ...
    
    def get_by_id(self, styleId): # -> None:
        """
        Return the ``<w:style>`` child element having ``styleId`` attribute
        matching *styleId*, or |None| if not found.
        """
        ...
    
    def get_by_name(self, name): # -> None:
        """
        Return the ``<w:style>`` child element having ``<w:name>`` child
        element with value *name*, or |None| if not found.
        """
        ...
    


