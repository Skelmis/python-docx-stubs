"""
This type stub file was generated by pyright.
"""

from .image import BaseImageHeader

class Tiff(BaseImageHeader):
    """
    Image header parser for TIFF images. Handles both big and little endian
    byte ordering.
    """
    @property
    def content_type(self): # -> Literal['image/tiff']:
        """
        Return the MIME type of this TIFF image, unconditionally the string
        ``image/tiff``.
        """
        ...
    
    @property
    def default_ext(self): # -> Literal['tiff']:
        """
        Default filename extension, always 'tiff' for TIFF images.
        """
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@Tiff:
        """
        Return a |Tiff| instance containing the properties of the TIFF image
        in *stream*.
        """
        ...
    


class _TiffParser:
    """
    Parses a TIFF image stream to extract the image properties found in its
    main image file directory (IFD)
    """
    def __init__(self, ifd_entries) -> None:
        ...
    
    @classmethod
    def parse(cls, stream): # -> Self@_TiffParser:
        """
        Return an instance of |_TiffParser| containing the properties parsed
        from the TIFF image in *stream*.
        """
        ...
    
    @property
    def horz_dpi(self): # -> int:
        """
        The horizontal dots per inch value calculated from the XResolution
        and ResolutionUnit tags of the IFD; defaults to 72 if those tags are
        not present.
        """
        ...
    
    @property
    def vert_dpi(self): # -> int:
        """
        The vertical dots per inch value calculated from the XResolution and
        ResolutionUnit tags of the IFD; defaults to 72 if those tags are not
        present.
        """
        ...
    
    @property
    def px_height(self):
        """
        The number of stacked rows of pixels in the image, |None| if the IFD
        contains no ``ImageLength`` tag, the expected case when the TIFF is
        embeded in an Exif image.
        """
        ...
    
    @property
    def px_width(self):
        """
        The number of pixels in each row in the image, |None| if the IFD
        contains no ``ImageWidth`` tag, the expected case when the TIFF is
        embeded in an Exif image.
        """
        ...
    


class _IfdEntries:
    """
    Image File Directory for a TIFF image, having mapping (dict) semantics
    allowing "tag" values to be retrieved by tag code.
    """
    def __init__(self, entries) -> None:
        ...
    
    def __contains__(self, key):
        """
        Provides ``in`` operator, e.g. ``tag in ifd_entries``
        """
        ...
    
    def __getitem__(self, key):
        """
        Provides indexed access, e.g. ``tag_value = ifd_entries[tag_code]``
        """
        ...
    
    @classmethod
    def from_stream(cls, stream, offset): # -> Self@_IfdEntries:
        """
        Return a new |_IfdEntries| instance parsed from *stream* starting at
        *offset*.
        """
        ...
    
    def get(self, tag_code, default=...):
        """
        Return value of IFD entry having tag matching *tag_code*, or
        *default* if no matching tag found.
        """
        ...
    


class _IfdParser:
    """
    Service object that knows how to extract directory entries from an Image
    File Directory (IFD)
    """
    def __init__(self, stream_rdr, offset) -> None:
        ...
    
    def iter_entries(self): # -> Generator[Unknown | _IfdEntry, Any, None]:
        """
        Generate an |_IfdEntry| instance corresponding to each entry in the
        directory.
        """
        ...
    


class _IfdEntry:
    """
    Base class for IFD entry classes. Subclasses are differentiated by value
    type, e.g. ASCII, long int, etc.
    """
    def __init__(self, tag_code, value) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream_rdr, offset): # -> Self@_IfdEntry:
        """
        Return an |_IfdEntry| subclass instance containing the tag and value
        of the tag parsed from *stream_rdr* at *offset*. Note this method is
        common to all subclasses. Override the ``_parse_value()`` method to
        provide distinctive behavior based on field type.
        """
        ...
    
    @property
    def tag(self): # -> Unknown:
        """
        Short int code that identifies this IFD entry
        """
        ...
    
    @property
    def value(self): # -> Unknown:
        """
        Value of this tag, its type being dependent on the tag.
        """
        ...
    


class _AsciiIfdEntry(_IfdEntry):
    """
    IFD entry having the form of a NULL-terminated ASCII string
    """
    ...


class _ShortIfdEntry(_IfdEntry):
    """
    IFD entry expressed as a short (2-byte) integer
    """
    ...


class _LongIfdEntry(_IfdEntry):
    """
    IFD entry expressed as a long (4-byte) integer
    """
    ...


class _RationalIfdEntry(_IfdEntry):
    """
    IFD entry expressed as a numerator, denominator pair
    """
    ...


