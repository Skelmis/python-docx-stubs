"""
This type stub file was generated by pyright.
"""

"""
Objects shared by docx modules.
"""
class Length(int):
    """
    Base class for length constructor classes Inches, Cm, Mm, Px, and Emu.
    Behaves as an int count of English Metric Units, 914,400 to the inch,
    36,000 to the mm. Provides convenience unit conversion methods in the form
    of read-only properties. Immutable.
    """
    _EMUS_PER_INCH = ...
    _EMUS_PER_CM = ...
    _EMUS_PER_MM = ...
    _EMUS_PER_PT = ...
    _EMUS_PER_TWIP = ...
    def __new__(cls, emu): # -> Self@Length:
        ...
    
    @property
    def cm(self): # -> float:
        """
        The equivalent length expressed in centimeters (float).
        """
        ...
    
    @property
    def emu(self): # -> Self@Length:
        """
        The equivalent length expressed in English Metric Units (int).
        """
        ...
    
    @property
    def inches(self): # -> float:
        """
        The equivalent length expressed in inches (float).
        """
        ...
    
    @property
    def mm(self): # -> float:
        """
        The equivalent length expressed in millimeters (float).
        """
        ...
    
    @property
    def pt(self): # -> float:
        """
        Floating point length in points
        """
        ...
    
    @property
    def twips(self): # -> int:
        """
        The equivalent length expressed in twips (int).
        """
        ...
    


class Inches(Length):
    """
    Convenience constructor for length in inches, e.g.
    ``width = Inches(0.5)``.
    """
    def __new__(cls, inches): # -> Self@Inches:
        ...
    


class Cm(Length):
    """
    Convenience constructor for length in centimeters, e.g.
    ``height = Cm(12)``.
    """
    def __new__(cls, cm): # -> Self@Cm:
        ...
    


class Emu(Length):
    """
    Convenience constructor for length in English Metric Units, e.g.
    ``width = Emu(457200)``.
    """
    def __new__(cls, emu): # -> Self@Emu:
        ...
    


class Mm(Length):
    """
    Convenience constructor for length in millimeters, e.g.
    ``width = Mm(240.5)``.
    """
    def __new__(cls, mm): # -> Self@Mm:
        ...
    


class Pt(Length):
    """
    Convenience value class for specifying a length in points
    """
    def __new__(cls, points): # -> Self@Pt:
        ...
    


class Twips(Length):
    """
    Convenience constructor for length in twips, e.g. ``width = Twips(42)``.
    A twip is a twentieth of a point, 635 EMU.
    """
    def __new__(cls, twips): # -> Self@Twips:
        ...
    


class RGBColor(tuple):
    """
    Immutable value object defining a particular RGB color.
    """
    def __new__(cls, r, g, b): # -> Self@RGBColor:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __str__(self) -> str:
        """
        Return a hex string rgb value, like '3C2F80'
        """
        ...
    
    @classmethod
    def from_string(cls, rgb_hex_str): # -> Self@RGBColor:
        """
        Return a new instance from an RGB color hex string like ``'3C2F80'``.
        """
        ...
    


def lazyproperty(f): # -> property:
    """
    @lazyprop decorator. Decorated method will be called only on first access
    to calculate a cached property value. After that, the cached value is
    returned.
    """
    ...

def write_only_property(f): # -> property:
    """
    @write_only_property decorator. Creates a property (descriptor attribute)
    that accepts assignment, but not getattr (use in an expression).
    """
    ...

class ElementProxy:
    """
    Base class for lxml element proxy classes. An element proxy class is one
    whose primary responsibilities are fulfilled by manipulating the
    attributes and child elements of an XML element. They are the most common
    type of class in python-docx other than custom element (oxml) classes.
    """
    __slots__ = ...
    def __init__(self, element, parent=...) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        """
        Return |True| if this proxy object refers to the same oxml element as
        does *other*. ElementProxy objects are value objects and should
        maintain no mutable local state. Equality for proxy objects is
        defined as referring to the same XML element, whether or not they are
        the same proxy object instance.
        """
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    @property
    def element(self): # -> Unknown:
        """
        The lxml element proxied by this object.
        """
        ...
    
    @property
    def part(self):
        """
        The package part containing this object
        """
        ...
    


class Parented:
    """
    Provides common services for document elements that occur below a part
    but may occasionally require an ancestor object to provide a service,
    such as add or drop a relationship. Provides ``self._parent`` attribute
    to subclasses.
    """
    def __init__(self, parent) -> None:
        ...
    
    @property
    def part(self):
        """
        The package part containing this object
        """
        ...
    


