"""
This type stub file was generated by pyright.
"""

from lxml import etree

"""
Temporary stand-in for main oxml module that came across with the
PackageReader transplant. Probably much will get replaced with objects from
the pptx.oxml.core and then this module will either get deleted or only hold
the package related custom element classes.
"""
element_class_lookup = ...
oxml_parser = ...
nsmap = ...
def parse_xml(text):
    """
    ``etree.fromstring()`` replacement that uses oxml parser
    """
    ...

def qn(tag): # -> str:
    """
    Stands for "qualified name", a utility function to turn a namespace
    prefixed tag name into a Clark-notation qualified tag name for lxml. For
    example, ``qn('p:cSld')`` returns ``'{http://schemas.../main}cSld'``.
    """
    ...

def serialize_part_xml(part_elm):
    """
    Serialize *part_elm* etree element to XML suitable for storage as an XML
    part. That is to say, no insignificant whitespace added for readability,
    and an appropriate XML declaration added with UTF-8 encoding specified.
    """
    ...

def serialize_for_reading(element):
    """
    Serialize *element* to human-readable XML suitable for tests. No XML
    declaration.
    """
    ...

class BaseOxmlElement(etree.ElementBase):
    """
    Base class for all custom element classes, to add standardized behavior
    to all classes in one place.
    """
    @property
    def xml(self):
        """
        Return XML string for this element, suitable for testing purposes.
        Pretty printed for readability and without an XML declaration at the
        top.
        """
        ...
    


class CT_Default(BaseOxmlElement):
    """
    ``<Default>`` element, specifying the default content type to be applied
    to a part with the specified extension.
    """
    @property
    def content_type(self):
        """
        String held in the ``ContentType`` attribute of this ``<Default>``
        element.
        """
        ...
    
    @property
    def extension(self):
        """
        String held in the ``Extension`` attribute of this ``<Default>``
        element.
        """
        ...
    
    @staticmethod
    def new(ext, content_type):
        """
        Return a new ``<Default>`` element with attributes set to parameter
        values.
        """
        ...
    


class CT_Override(BaseOxmlElement):
    """
    ``<Override>`` element, specifying the content type to be applied for a
    part with the specified partname.
    """
    @property
    def content_type(self):
        """
        String held in the ``ContentType`` attribute of this ``<Override>``
        element.
        """
        ...
    
    @staticmethod
    def new(partname, content_type):
        """
        Return a new ``<Override>`` element with attributes set to parameter
        values.
        """
        ...
    
    @property
    def partname(self):
        """
        String held in the ``PartName`` attribute of this ``<Override>``
        element.
        """
        ...
    


class CT_Relationship(BaseOxmlElement):
    """
    ``<Relationship>`` element, representing a single relationship from a
    source to a target part.
    """
    @staticmethod
    def new(rId, reltype, target, target_mode=...):
        """
        Return a new ``<Relationship>`` element.
        """
        ...
    
    @property
    def rId(self):
        """
        String held in the ``Id`` attribute of this ``<Relationship>``
        element.
        """
        ...
    
    @property
    def reltype(self):
        """
        String held in the ``Type`` attribute of this ``<Relationship>``
        element.
        """
        ...
    
    @property
    def target_ref(self):
        """
        String held in the ``Target`` attribute of this ``<Relationship>``
        element.
        """
        ...
    
    @property
    def target_mode(self):
        """
        String held in the ``TargetMode`` attribute of this
        ``<Relationship>`` element, either ``Internal`` or ``External``.
        Defaults to ``Internal``.
        """
        ...
    


class CT_Relationships(BaseOxmlElement):
    """
    ``<Relationships>`` element, the root element in a .rels file.
    """
    def add_rel(self, rId, reltype, target, is_external=...): # -> None:
        """
        Add a child ``<Relationship>`` element with attributes set according
        to parameter values.
        """
        ...
    
    @staticmethod
    def new():
        """
        Return a new ``<Relationships>`` element.
        """
        ...
    
    @property
    def Relationship_lst(self):
        """
        Return a list containing all the ``<Relationship>`` child elements.
        """
        ...
    
    @property
    def xml(self):
        """
        Return XML string for this element, suitable for saving in a .rels
        stream, not pretty printed and with an XML declaration at the top.
        """
        ...
    


class CT_Types(BaseOxmlElement):
    """
    ``<Types>`` element, the container element for Default and Override
    elements in [Content_Types].xml.
    """
    def add_default(self, ext, content_type): # -> None:
        """
        Add a child ``<Default>`` element with attributes set to parameter
        values.
        """
        ...
    
    def add_override(self, partname, content_type): # -> None:
        """
        Add a child ``<Override>`` element with attributes set to parameter
        values.
        """
        ...
    
    @property
    def defaults(self):
        ...
    
    @staticmethod
    def new():
        """
        Return a new ``<Types>`` element.
        """
        ...
    
    @property
    def overrides(self):
        ...
    


ct_namespace = ...
pr_namespace = ...
