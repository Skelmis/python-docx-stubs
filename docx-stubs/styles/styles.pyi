"""
This type stub file was generated by pyright.
"""

from docx.shared import ElementProxy

"""Styles object, container for all objects in the styles part"""
class Styles(ElementProxy):
    """Provides access to the styles defined in a document.

    Accessed using the :attr:`.Document.styles` property. Supports ``len()``, iteration,
    and dictionary-style access by style name.
    """
    __slots__ = ...
    def __contains__(self, name): # -> bool:
        """
        Enables `in` operator on style name.
        """
        ...
    
    def __getitem__(self, key):
        """
        Enables dictionary-style access by UI name. Lookup by style id is
        deprecated, triggers a warning, and will be removed in a near-future
        release.
        """
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def add_style(self, name, style_type, builtin=...):
        """
        Return a newly added style object of *style_type* and identified
        by *name*. A builtin style can be defined by passing True for the
        optional *builtin* argument.
        """
        ...
    
    def default(self, style_type): # -> None:
        """
        Return the default style for *style_type* or |None| if no default is
        defined for that type (not common).
        """
        ...
    
    def get_by_id(self, style_id, style_type): # -> None:
        """Return the style of *style_type* matching *style_id*.

        Returns the default for *style_type* if *style_id* is not found or is |None|, or
        if the style having *style_id* is not of *style_type*.
        """
        ...
    
    def get_style_id(self, style_or_name, style_type): # -> None:
        """
        Return the id of the style corresponding to *style_or_name*, or
        |None| if *style_or_name* is |None|. If *style_or_name* is not
        a style object, the style is looked up using *style_or_name* as
        a style name, raising |ValueError| if no style with that name is
        defined. Raises |ValueError| if the target style is not of
        *style_type*.
        """
        ...
    
    @property
    def latent_styles(self): # -> LatentStyles:
        """
        A |LatentStyles| object providing access to the default behaviors for
        latent styles and the collection of |_LatentStyle| objects that
        define overrides of those defaults for a particular named latent
        style.
        """
        ...
    


