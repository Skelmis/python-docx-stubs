"""
This type stub file was generated by pyright.
"""

from ..shared import ElementProxy, lazyproperty

"""
Paragraph-related proxy types.
"""
class ParagraphFormat(ElementProxy):
    """
    Provides access to paragraph formatting such as justification,
    indentation, line spacing, space before and after, and widow/orphan
    control.
    """
    __slots__ = ...
    @property
    def alignment(self): # -> None:
        """
        A member of the :ref:`WdParagraphAlignment` enumeration specifying
        the justification setting for this paragraph. A value of |None|
        indicates paragraph alignment is inherited from the style hierarchy.
        """
        ...
    
    @alignment.setter
    def alignment(self, value): # -> None:
        ...
    
    @property
    def first_line_indent(self): # -> None:
        """
        |Length| value specifying the relative difference in indentation for
        the first line of the paragraph. A positive value causes the first
        line to be indented. A negative value produces a hanging indent.
        |None| indicates first line indentation is inherited from the style
        hierarchy.
        """
        ...
    
    @first_line_indent.setter
    def first_line_indent(self, value): # -> None:
        ...
    
    @property
    def keep_together(self): # -> None:
        """
        |True| if the paragraph should be kept "in one piece" and not broken
        across a page boundary when the document is rendered. |None|
        indicates its effective value is inherited from the style hierarchy.
        """
        ...
    
    @keep_together.setter
    def keep_together(self, value): # -> None:
        ...
    
    @property
    def keep_with_next(self): # -> None:
        """
        |True| if the paragraph should be kept on the same page as the
        subsequent paragraph when the document is rendered. For example, this
        property could be used to keep a section heading on the same page as
        its first paragraph. |None| indicates its effective value is
        inherited from the style hierarchy.
        """
        ...
    
    @keep_with_next.setter
    def keep_with_next(self, value): # -> None:
        ...
    
    @property
    def left_indent(self): # -> None:
        """
        |Length| value specifying the space between the left margin and the
        left side of the paragraph. |None| indicates the left indent value is
        inherited from the style hierarchy. Use an |Inches| value object as
        a convenient way to apply indentation in units of inches.
        """
        ...
    
    @left_indent.setter
    def left_indent(self, value): # -> None:
        ...
    
    @property
    def line_spacing(self): # -> None:
        """
        |float| or |Length| value specifying the space between baselines in
        successive lines of the paragraph. A value of |None| indicates line
        spacing is inherited from the style hierarchy. A float value, e.g.
        ``2.0`` or ``1.75``, indicates spacing is applied in multiples of
        line heights. A |Length| value such as ``Pt(12)`` indicates spacing
        is a fixed height. The |Pt| value class is a convenient way to apply
        line spacing in units of points. Assigning |None| resets line spacing
        to inherit from the style hierarchy.
        """
        ...
    
    @line_spacing.setter
    def line_spacing(self, value): # -> None:
        ...
    
    @property
    def line_spacing_rule(self): # -> None:
        """
        A member of the :ref:`WdLineSpacing` enumeration indicating how the
        value of :attr:`line_spacing` should be interpreted. Assigning any of
        the :ref:`WdLineSpacing` members :attr:`SINGLE`, :attr:`DOUBLE`, or
        :attr:`ONE_POINT_FIVE` will cause the value of :attr:`line_spacing`
        to be updated to produce the corresponding line spacing.
        """
        ...
    
    @line_spacing_rule.setter
    def line_spacing_rule(self, value): # -> None:
        ...
    
    @property
    def page_break_before(self): # -> None:
        """
        |True| if the paragraph should appear at the top of the page
        following the prior paragraph. |None| indicates its effective value
        is inherited from the style hierarchy.
        """
        ...
    
    @page_break_before.setter
    def page_break_before(self, value): # -> None:
        ...
    
    @property
    def right_indent(self): # -> None:
        """
        |Length| value specifying the space between the right margin and the
        right side of the paragraph. |None| indicates the right indent value
        is inherited from the style hierarchy. Use a |Cm| value object as
        a convenient way to apply indentation in units of centimeters.
        """
        ...
    
    @right_indent.setter
    def right_indent(self, value): # -> None:
        ...
    
    @property
    def space_after(self): # -> None:
        """
        |Length| value specifying the spacing to appear between this
        paragraph and the subsequent paragraph. |None| indicates this value
        is inherited from the style hierarchy. |Length| objects provide
        convenience properties, such as :attr:`~.Length.pt` and
        :attr:`~.Length.inches`, that allow easy conversion to various length
        units.
        """
        ...
    
    @space_after.setter
    def space_after(self, value): # -> None:
        ...
    
    @property
    def space_before(self): # -> None:
        """
        |Length| value specifying the spacing to appear between this
        paragraph and the prior paragraph. |None| indicates this value is
        inherited from the style hierarchy. |Length| objects provide
        convenience properties, such as :attr:`~.Length.pt` and
        :attr:`~.Length.cm`, that allow easy conversion to various length
        units.
        """
        ...
    
    @space_before.setter
    def space_before(self, value): # -> None:
        ...
    
    @lazyproperty
    def tab_stops(self): # -> TabStops:
        """
        |TabStops| object providing access to the tab stops defined for this
        paragraph format.
        """
        ...
    
    @property
    def widow_control(self): # -> None:
        """
        |True| if the first and last lines in the paragraph remain on the
        same page as the rest of the paragraph when Word repaginates the
        document. |None| indicates its effective value is inherited from the
        style hierarchy.
        """
        ...
    
    @widow_control.setter
    def widow_control(self, value): # -> None:
        ...
    


