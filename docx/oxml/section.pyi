"""
This type stub file was generated by pyright.
"""

from docx.oxml.xmlchemy import BaseOxmlElement

"""Section-related custom element classes"""
class CT_HdrFtr(BaseOxmlElement):
    """`w:hdr` and `w:ftr`, the root element for header and footer part respectively"""
    p = ...
    tbl = ...


class CT_HdrFtrRef(BaseOxmlElement):
    """`w:headerReference` and `w:footerReference` elements"""
    type_ = ...
    rId = ...


class CT_PageMar(BaseOxmlElement):
    """
    ``<w:pgMar>`` element, defining page margins.
    """
    top = ...
    right = ...
    bottom = ...
    left = ...
    header = ...
    footer = ...
    gutter = ...


class CT_PageSz(BaseOxmlElement):
    """
    ``<w:pgSz>`` element, defining page dimensions and orientation.
    """
    w = ...
    h = ...
    orient = ...


class CT_SectPr(BaseOxmlElement):
    """`w:sectPr` element, the container element for section properties"""
    _tag_seq = ...
    headerReference = ...
    footerReference = ...
    type = ...
    pgSz = ...
    pgMar = ...
    titlePg = ...
    def add_footerReference(self, type_, rId):
        """Return newly added CT_HdrFtrRef element of *type_* with *rId*.

        The element tag is `w:footerReference`.
        """
        ...
    
    def add_headerReference(self, type_, rId):
        """Return newly added CT_HdrFtrRef element of *type_* with *rId*.

        The element tag is `w:headerReference`.
        """
        ...
    
    @property
    def bottom_margin(self): # -> None:
        """
        The value of the ``w:bottom`` attribute in the ``<w:pgMar>`` child
        element, as a |Length| object, or |None| if either the element or the
        attribute is not present.
        """
        ...
    
    @bottom_margin.setter
    def bottom_margin(self, value): # -> None:
        ...
    
    def clone(self): # -> Self@CT_SectPr:
        """
        Return an exact duplicate of this ``<w:sectPr>`` element tree
        suitable for use in adding a section break. All rsid* attributes are
        removed from the root ``<w:sectPr>`` element.
        """
        ...
    
    @property
    def footer(self): # -> None:
        """
        The value of the ``w:footer`` attribute in the ``<w:pgMar>`` child
        element, as a |Length| object, or |None| if either the element or the
        attribute is not present.
        """
        ...
    
    @footer.setter
    def footer(self, value): # -> None:
        ...
    
    def get_footerReference(self, type_): # -> None:
        """Return footerReference element of *type_* or None if not present."""
        ...
    
    def get_headerReference(self, type_): # -> None:
        """Return headerReference element of *type_* or None if not present."""
        ...
    
    @property
    def gutter(self): # -> None:
        """
        The value of the ``w:gutter`` attribute in the ``<w:pgMar>`` child
        element, as a |Length| object, or |None| if either the element or the
        attribute is not present.
        """
        ...
    
    @gutter.setter
    def gutter(self, value): # -> None:
        ...
    
    @property
    def header(self): # -> None:
        """
        The value of the ``w:header`` attribute in the ``<w:pgMar>`` child
        element, as a |Length| object, or |None| if either the element or the
        attribute is not present.
        """
        ...
    
    @header.setter
    def header(self, value): # -> None:
        ...
    
    @property
    def left_margin(self): # -> None:
        """
        The value of the ``w:left`` attribute in the ``<w:pgMar>`` child
        element, as a |Length| object, or |None| if either the element or the
        attribute is not present.
        """
        ...
    
    @left_margin.setter
    def left_margin(self, value): # -> None:
        ...
    
    @property
    def orientation(self):
        """
        The member of the ``WD_ORIENTATION`` enumeration corresponding to the
        value of the ``orient`` attribute of the ``<w:pgSz>`` child element,
        or ``WD_ORIENTATION.PORTRAIT`` if not present.
        """
        ...
    
    @orientation.setter
    def orientation(self, value): # -> None:
        ...
    
    @property
    def page_height(self): # -> None:
        """
        Value in EMU of the ``h`` attribute of the ``<w:pgSz>`` child
        element, or |None| if not present.
        """
        ...
    
    @page_height.setter
    def page_height(self, value): # -> None:
        ...
    
    @property
    def page_width(self): # -> None:
        """
        Value in EMU of the ``w`` attribute of the ``<w:pgSz>`` child
        element, or |None| if not present.
        """
        ...
    
    @page_width.setter
    def page_width(self, value): # -> None:
        ...
    
    @property
    def preceding_sectPr(self): # -> None:
        """sectPr immediately preceding this one or None if this is the first."""
        ...
    
    def remove_footerReference(self, type_):
        """Return rId of w:footerReference child of *type_* after removing it."""
        ...
    
    def remove_headerReference(self, type_):
        """Return rId of w:headerReference child of *type_* after removing it."""
        ...
    
    @property
    def right_margin(self): # -> None:
        """
        The value of the ``w:right`` attribute in the ``<w:pgMar>`` child
        element, as a |Length| object, or |None| if either the element or the
        attribute is not present.
        """
        ...
    
    @right_margin.setter
    def right_margin(self, value): # -> None:
        ...
    
    @property
    def start_type(self):
        """
        The member of the ``WD_SECTION_START`` enumeration corresponding to
        the value of the ``val`` attribute of the ``<w:type>`` child element,
        or ``WD_SECTION_START.NEW_PAGE`` if not present.
        """
        ...
    
    @start_type.setter
    def start_type(self, value): # -> None:
        ...
    
    @property
    def titlePg_val(self): # -> Literal[False]:
        """Value of `w:titlePg/@val` or |None| if not present"""
        ...
    
    @titlePg_val.setter
    def titlePg_val(self, value): # -> None:
        ...
    
    @property
    def top_margin(self): # -> None:
        """
        The value of the ``w:top`` attribute in the ``<w:pgMar>`` child
        element, as a |Length| object, or |None| if either the element or the
        attribute is not present.
        """
        ...
    
    @top_margin.setter
    def top_margin(self, value): # -> None:
        ...
    


class CT_SectType(BaseOxmlElement):
    """
    ``<w:sectType>`` element, defining the section start type.
    """
    val = ...


