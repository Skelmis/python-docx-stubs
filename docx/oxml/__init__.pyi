"""
This type stub file was generated by pyright.
"""

from __future__ import absolute_import
from lxml import etree
from .ns import NamespacePrefixedTag, nsmap
from .shared import CT_DecimalNumber, CT_OnOff, CT_String
from .coreprops import CT_CoreProperties
from .document import CT_Body, CT_Document
from .numbering import CT_Num, CT_NumLvl, CT_NumPr, CT_Numbering
from .section import CT_HdrFtr, CT_HdrFtrRef, CT_PageMar, CT_PageSz, CT_SectPr, CT_SectType
from .settings import CT_Settings
from .shape import CT_Blip, CT_BlipFillProperties, CT_GraphicalObject, CT_GraphicalObjectData, CT_Inline, CT_NonVisualDrawingProps, CT_Picture, CT_PictureNonVisual, CT_Point2D, CT_PositiveSize2D, CT_ShapeProperties, CT_Transform2D
from .styles import CT_LatentStyles, CT_LsdException, CT_Style, CT_Styles
from .table import CT_Height, CT_Row, CT_Tbl, CT_TblGrid, CT_TblGridCol, CT_TblLayoutType, CT_TblPr, CT_TblWidth, CT_Tc, CT_TcPr, CT_TrPr, CT_VMerge, CT_VerticalJc
from .text.font import CT_Color, CT_Fonts, CT_Highlight, CT_HpsMeasure, CT_RPr, CT_Underline, CT_VerticalAlignRun
from .text.paragraph import CT_P
from .text.parfmt import CT_Ind, CT_Jc, CT_PPr, CT_Spacing, CT_TabStop, CT_TabStops
from .text.run import CT_Br, CT_R, CT_Text

"""
Initializes oxml sub-package, including registering custom element classes
corresponding to Open XML elements.
"""
element_class_lookup = ...
oxml_parser = ...
def parse_xml(xml):
    """
    Return root lxml element obtained by parsing XML character string in
    *xml*, which can be either a Python 2.x string or unicode. The custom
    parser is used, so custom element classes are produced for elements in
    *xml* that have them.
    """
    ...

def register_element_cls(tag, cls): # -> None:
    """
    Register *cls* to be constructed when the oxml parser encounters an
    element with matching *tag*. *tag* is a string of the form
    ``nspfx:tagroot``, e.g. ``'w:document'``.
    """
    ...

def OxmlElement(nsptag_str, attrs=..., nsdecls=...):
    """
    Return a 'loose' lxml element having the tag specified by *nsptag_str*.
    *nsptag_str* must contain the standard namespace prefix, e.g. 'a:tbl'.
    The resulting element is an instance of the custom element class for this
    tag name if one is defined. A dictionary of attribute values may be
    provided as *attrs*; they are set if present. All namespaces defined in
    the dict *nsdecls* are declared in the element using the key as the
    prefix and the value as the namespace name. If *nsdecls* is not provided,
    a single namespace declaration is added based on the prefix on
    *nsptag_str*.
    """
    ...

