"""
This type stub file was generated by pyright.
"""

from lxml import etree
from docx.compat import Unicode

"""
Provides a wrapper around lxml that enables declarative definition of custom
element classes.
"""
def serialize_for_reading(element): # -> XmlString:
    """
    Serialize *element* to human-readable XML suitable for tests. No XML
    declaration.
    """
    ...

class XmlString(Unicode):
    """
    Provides string comparison override suitable for serialized XML that is
    useful for tests.
    """
    _xml_elm_line_patt = ...
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    


class MetaOxmlElement(type):
    """
    Metaclass for BaseOxmlElement
    """
    def __init__(cls, clsname, bases, clsdict) -> None:
        ...
    


class BaseAttribute:
    """
    Base class for OptionalAttribute and RequiredAttribute, providing common
    methods.
    """
    def __init__(self, attr_name, simple_type) -> None:
        ...
    
    def populate_class_members(self, element_cls, prop_name): # -> None:
        """
        Add the appropriate methods to *element_cls*.
        """
        ...
    


class OptionalAttribute(BaseAttribute):
    """
    Defines an optional attribute on a custom element class. An optional
    attribute returns a default value when not present for reading. When
    assigned |None|, the attribute is removed.
    """
    def __init__(self, attr_name, simple_type, default=...) -> None:
        ...
    


class RequiredAttribute(BaseAttribute):
    """
    Defines a required attribute on a custom element class. A required
    attribute is assumed to be present for reading, so does not have
    a default value; its actual value is always used. If missing on read,
    an |InvalidXmlError| is raised. It also does not remove the attribute if
    |None| is assigned. Assigning |None| raises |TypeError| or |ValueError|,
    depending on the simple type of the attribute.
    """
    ...


class _BaseChildElement:
    """
    Base class for the child element classes corresponding to varying
    cardinalities, such as ZeroOrOne and ZeroOrMore.
    """
    def __init__(self, nsptagname, successors=...) -> None:
        ...
    
    def populate_class_members(self, element_cls, prop_name): # -> None:
        """
        Baseline behavior for adding the appropriate methods to
        *element_cls*.
        """
        ...
    


class Choice(_BaseChildElement):
    """
    Defines a child element belonging to a group, only one of which may
    appear as a child.
    """
    @property
    def nsptagname(self): # -> Unknown:
        ...
    
    def populate_class_members(self, element_cls, group_prop_name, successors): # -> None:
        """
        Add the appropriate methods to *element_cls*.
        """
        ...
    


class OneAndOnlyOne(_BaseChildElement):
    """
    Defines a required child element for MetaOxmlElement.
    """
    def __init__(self, nsptagname) -> None:
        ...
    
    def populate_class_members(self, element_cls, prop_name): # -> None:
        """
        Add the appropriate methods to *element_cls*.
        """
        ...
    


class OneOrMore(_BaseChildElement):
    """
    Defines a repeating child element for MetaOxmlElement that must appear at
    least once.
    """
    def populate_class_members(self, element_cls, prop_name): # -> None:
        """
        Add the appropriate methods to *element_cls*.
        """
        ...
    


class ZeroOrMore(_BaseChildElement):
    """
    Defines an optional repeating child element for MetaOxmlElement.
    """
    def populate_class_members(self, element_cls, prop_name): # -> None:
        """
        Add the appropriate methods to *element_cls*.
        """
        ...
    


class ZeroOrOne(_BaseChildElement):
    """
    Defines an optional child element for MetaOxmlElement.
    """
    def populate_class_members(self, element_cls, prop_name): # -> None:
        """
        Add the appropriate methods to *element_cls*.
        """
        ...
    


class ZeroOrOneChoice(_BaseChildElement):
    """
    Correspondes to an ``EG_*`` element group where at most one of its
    members may appear as a child.
    """
    def __init__(self, choices, successors=...) -> None:
        ...
    
    def populate_class_members(self, element_cls, prop_name): # -> None:
        """
        Add the appropriate methods to *element_cls*.
        """
        ...
    


class _OxmlElementBase(etree.ElementBase):
    """
    Effective base class for all custom element classes, to add standardized
    behavior to all classes in one place. Actual inheritance is from
    BaseOxmlElement below, needed to manage Python 2-3 metaclass declaration
    compatibility.
    """
    __metaclass__ = MetaOxmlElement
    def __repr__(self): # -> str:
        ...
    
    def first_child_found_in(self, *tagnames): # -> None:
        """
        Return the first child found with tag in *tagnames*, or None if
        not found.
        """
        ...
    
    def insert_element_before(self, elm, *tagnames):
        ...
    
    def remove_all(self, *tagnames): # -> None:
        """
        Remove all child elements whose tagname (e.g. 'a:p') appears in
        *tagnames*.
        """
        ...
    
    @property
    def xml(self): # -> XmlString:
        """
        Return XML string for this element, suitable for testing purposes.
        Pretty printed for readability and without an XML declaration at the
        top.
        """
        ...
    
    def xpath(self, xpath_str):
        """
        Override of ``lxml`` _Element.xpath() method to provide standard Open
        XML namespace mapping (``nsmap``) in centralized location.
        """
        ...
    


BaseOxmlElement = ...
