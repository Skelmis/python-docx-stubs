"""
This type stub file was generated by pyright.
"""

from ..xmlchemy import BaseOxmlElement

"""
Custom element classes related to paragraph properties (CT_PPr).
"""
class CT_Ind(BaseOxmlElement):
    """
    ``<w:ind>`` element, specifying paragraph indentation.
    """
    left = ...
    right = ...
    firstLine = ...
    hanging = ...


class CT_Jc(BaseOxmlElement):
    """
    ``<w:jc>`` element, specifying paragraph justification.
    """
    val = ...


class CT_PPr(BaseOxmlElement):
    """
    ``<w:pPr>`` element, containing the properties for a paragraph.
    """
    _tag_seq = ...
    pStyle = ...
    keepNext = ...
    keepLines = ...
    pageBreakBefore = ...
    widowControl = ...
    numPr = ...
    tabs = ...
    spacing = ...
    ind = ...
    jc = ...
    sectPr = ...
    @property
    def first_line_indent(self): # -> Length | None:
        """
        A |Length| value calculated from the values of `w:ind/@w:firstLine`
        and `w:ind/@w:hanging`. Returns |None| if the `w:ind` child is not
        present.
        """
        ...
    
    @first_line_indent.setter
    def first_line_indent(self, value): # -> None:
        ...
    
    @property
    def ind_left(self): # -> None:
        """
        The value of `w:ind/@w:left` or |None| if not present.
        """
        ...
    
    @ind_left.setter
    def ind_left(self, value): # -> None:
        ...
    
    @property
    def ind_right(self): # -> None:
        """
        The value of `w:ind/@w:right` or |None| if not present.
        """
        ...
    
    @ind_right.setter
    def ind_right(self, value): # -> None:
        ...
    
    @property
    def jc_val(self): # -> None:
        """
        The value of the ``<w:jc>`` child element or |None| if not present.
        """
        ...
    
    @jc_val.setter
    def jc_val(self, value): # -> None:
        ...
    
    @property
    def keepLines_val(self): # -> None:
        """
        The value of `keepLines/@val` or |None| if not present.
        """
        ...
    
    @keepLines_val.setter
    def keepLines_val(self, value): # -> None:
        ...
    
    @property
    def keepNext_val(self): # -> None:
        """
        The value of `keepNext/@val` or |None| if not present.
        """
        ...
    
    @keepNext_val.setter
    def keepNext_val(self, value): # -> None:
        ...
    
    @property
    def pageBreakBefore_val(self): # -> None:
        """
        The value of `pageBreakBefore/@val` or |None| if not present.
        """
        ...
    
    @pageBreakBefore_val.setter
    def pageBreakBefore_val(self, value): # -> None:
        ...
    
    @property
    def spacing_after(self): # -> None:
        """
        The value of `w:spacing/@w:after` or |None| if not present.
        """
        ...
    
    @spacing_after.setter
    def spacing_after(self, value): # -> None:
        ...
    
    @property
    def spacing_before(self): # -> None:
        """
        The value of `w:spacing/@w:before` or |None| if not present.
        """
        ...
    
    @spacing_before.setter
    def spacing_before(self, value): # -> None:
        ...
    
    @property
    def spacing_line(self): # -> None:
        """
        The value of `w:spacing/@w:line` or |None| if not present.
        """
        ...
    
    @spacing_line.setter
    def spacing_line(self, value): # -> None:
        ...
    
    @property
    def spacing_lineRule(self): # -> None:
        """
        The value of `w:spacing/@w:lineRule` as a member of the
        :ref:`WdLineSpacing` enumeration. Only the `MULTIPLE`, `EXACTLY`, and
        `AT_LEAST` members are used. It is the responsibility of the client
        to calculate the use of `SINGLE`, `DOUBLE`, and `MULTIPLE` based on
        the value of `w:spacing/@w:line` if that behavior is desired.
        """
        ...
    
    @spacing_lineRule.setter
    def spacing_lineRule(self, value): # -> None:
        ...
    
    @property
    def style(self): # -> None:
        """
        String contained in <w:pStyle> child, or None if that element is not
        present.
        """
        ...
    
    @style.setter
    def style(self, style): # -> None:
        """
        Set val attribute of <w:pStyle> child element to *style*, adding a
        new element if necessary. If *style* is |None|, remove the <w:pStyle>
        element if present.
        """
        ...
    
    @property
    def widowControl_val(self): # -> None:
        """
        The value of `widowControl/@val` or |None| if not present.
        """
        ...
    
    @widowControl_val.setter
    def widowControl_val(self, value): # -> None:
        ...
    


class CT_Spacing(BaseOxmlElement):
    """
    ``<w:spacing>`` element, specifying paragraph spacing attributes such as
    space before and line spacing.
    """
    after = ...
    before = ...
    line = ...
    lineRule = ...


class CT_TabStop(BaseOxmlElement):
    """
    ``<w:tab>`` element, representing an individual tab stop.
    """
    val = ...
    leader = ...
    pos = ...


class CT_TabStops(BaseOxmlElement):
    """
    ``<w:tabs>`` element, container for a sorted sequence of tab stops.
    """
    tab = ...
    def insert_tab_in_order(self, pos, align, leader):
        """
        Insert a newly created `w:tab` child element in *pos* order.
        """
        ...
    


