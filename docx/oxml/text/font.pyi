"""
This type stub file was generated by pyright.
"""

from ..xmlchemy import BaseOxmlElement

"""
Custom element classes related to run properties (font).
"""
class CT_Color(BaseOxmlElement):
    """
    `w:color` element, specifying the color of a font and perhaps other
    objects.
    """
    val = ...
    themeColor = ...


class CT_Fonts(BaseOxmlElement):
    """
    ``<w:rFonts>`` element, specifying typeface name for the various language
    types.
    """
    ascii = ...
    hAnsi = ...


class CT_Highlight(BaseOxmlElement):
    """
    `w:highlight` element, specifying font highlighting/background color.
    """
    val = ...


class CT_HpsMeasure(BaseOxmlElement):
    """
    Used for ``<w:sz>`` element and others, specifying font size in
    half-points.
    """
    val = ...


class CT_RPr(BaseOxmlElement):
    """
    ``<w:rPr>`` element, containing the properties for a run.
    """
    _tag_seq = ...
    rStyle = ...
    rFonts = ...
    b = ...
    bCs = ...
    i = ...
    iCs = ...
    caps = ...
    smallCaps = ...
    strike = ...
    dstrike = ...
    outline = ...
    shadow = ...
    emboss = ...
    imprint = ...
    noProof = ...
    snapToGrid = ...
    vanish = ...
    webHidden = ...
    color = ...
    sz = ...
    highlight = ...
    u = ...
    vertAlign = ...
    rtl = ...
    cs = ...
    specVanish = ...
    oMath = ...
    @property
    def highlight_val(self): # -> None:
        """
        Value of `w:highlight/@val` attribute, specifying a font's highlight
        color, or `None` if the text is not highlighted.
        """
        ...
    
    @highlight_val.setter
    def highlight_val(self, value): # -> None:
        ...
    
    @property
    def rFonts_ascii(self): # -> None:
        """
        The value of `w:rFonts/@w:ascii` or |None| if not present. Represents
        the assigned typeface name. The rFonts element also specifies other
        special-case typeface names; this method handles the case where just
        the common name is required.
        """
        ...
    
    @rFonts_ascii.setter
    def rFonts_ascii(self, value): # -> None:
        ...
    
    @property
    def rFonts_hAnsi(self): # -> None:
        """
        The value of `w:rFonts/@w:hAnsi` or |None| if not present.
        """
        ...
    
    @rFonts_hAnsi.setter
    def rFonts_hAnsi(self, value): # -> None:
        ...
    
    @property
    def style(self): # -> None:
        """
        String contained in <w:rStyle> child, or None if that element is not
        present.
        """
        ...
    
    @style.setter
    def style(self, style): # -> None:
        """
        Set val attribute of <w:rStyle> child element to *style*, adding a
        new element if necessary. If *style* is |None|, remove the <w:rStyle>
        element if present.
        """
        ...
    
    @property
    def subscript(self): # -> bool | None:
        """
        |True| if `w:vertAlign/@w:val` is 'subscript'. |False| if
        `w:vertAlign/@w:val` contains any other value. |None| if
        `w:vertAlign` is not present.
        """
        ...
    
    @subscript.setter
    def subscript(self, value): # -> None:
        ...
    
    @property
    def superscript(self): # -> bool | None:
        """
        |True| if `w:vertAlign/@w:val` is 'superscript'. |False| if
        `w:vertAlign/@w:val` contains any other value. |None| if
        `w:vertAlign` is not present.
        """
        ...
    
    @superscript.setter
    def superscript(self, value): # -> None:
        ...
    
    @property
    def sz_val(self): # -> None:
        """
        The value of `w:sz/@w:val` or |None| if not present.
        """
        ...
    
    @sz_val.setter
    def sz_val(self, value): # -> None:
        ...
    
    @property
    def u_val(self): # -> None:
        """
        Value of `w:u/@val`, or None if not present.
        """
        ...
    
    @u_val.setter
    def u_val(self, value): # -> None:
        ...
    


class CT_Underline(BaseOxmlElement):
    """
    ``<w:u>`` element, specifying the underlining style for a run.
    """
    @property
    def val(self): # -> bool:
        """
        The underline type corresponding to the ``w:val`` attribute value.
        """
        ...
    
    @val.setter
    def val(self, value): # -> None:
        ...
    


class CT_VerticalAlignRun(BaseOxmlElement):
    """
    ``<w:vertAlign>`` element, specifying subscript or superscript.
    """
    val = ...


