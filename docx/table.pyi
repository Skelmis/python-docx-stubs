"""
This type stub file was generated by pyright.
"""
from typing import Any

from docx.text.paragraph import Paragraph

from docx.enum.table import WD_TABLE_DIRECTION

from docx.styles.style import _TableStyle

from .blkcntnr import BlockItemContainer
from .shared import Parented, lazyproperty

"""
The |Table| object and related proxy classes.
"""
class Table(Parented):
    """
    Proxy class for a WordprocessingML ``<w:tbl>`` element.
    """
    def __init__(self, tbl, parent) -> None:
        ...
    
    def add_column(self, width) -> _Column:
        """
        Return a |_Column| object of *width*, newly added rightmost to the
        table.
        """
        ...
    
    def add_row(self) -> _Row:
        """
        Return a |_Row| instance, newly added bottom-most to the table.
        """
        ...
    
    @property
    def alignment(self):
        """
        Read/write. A member of :ref:`WdRowAlignment` or None, specifying the
        positioning of this table between the page margins. |None| if no
        setting is specified, causing the effective value to be inherited
        from the style hierarchy.
        """
        ...
    
    @alignment.setter
    def alignment(self, value): # -> None:
        ...
    
    @property
    def autofit(self) -> bool:
        """
        |True| if column widths can be automatically adjusted to improve the
        fit of cell contents. |False| if table layout is fixed. Column widths
        are adjusted in either case if total column width exceeds page width.
        Read/write boolean.
        """
        ...
    
    @autofit.setter
    def autofit(self, value) -> None:
        ...
    
    def cell(self, row_idx: int, col_idx: int) -> _Cell:
        """
        Return |_Cell| instance correponding to table cell at *row_idx*,
        *col_idx* intersection, where (0, 0) is the top, left-most cell.
        """
        ...
    
    def column_cells(self, column_idx: int) -> list[_Cell]:
        """
        Sequence of cells in the column at *column_idx* in this table.
        """
        ...
    
    @lazyproperty
    def columns(self) -> _Columns:
        """
        |_Columns| instance representing the sequence of columns in this
        table.
        """
        ...
    
    def row_cells(self, row_idx: int) -> list[_Cell]:
        """
        Sequence of cells in the row at *row_idx* in this table.
        """
        ...
    
    @lazyproperty
    def rows(self) -> _Rows:
        """
        |_Rows| instance containing the sequence of rows in this table.
        """
        ...
    
    @property
    def style(self) -> _TableStyle:
        """
        Read/write. A |_TableStyle| object representing the style applied to
        this table. The default table style for the document (often `Normal
        Table`) is returned if the table has no directly-applied style.
        Assigning |None| to this property removes any directly-applied table
        style causing it to inherit the default table style of the document.
        Note that the style name of a table style differs slightly from that
        displayed in the user interface; a hyphen, if it appears, must be
        removed. For example, `Light Shading - Accent 1` becomes `Light
        Shading Accent 1`.
        """
        ...
    
    @style.setter
    def style(self, style_or_name) -> None:
        ...
    
    @property
    def table(self) -> "Table":
        """
        Provide child objects with reference to the |Table| object they
        belong to, without them having to know their direct parent is
        a |Table| object. This is the terminus of a series of `parent._table`
        calls from an arbitrary child through its ancestors.
        """
        ...
    
    @property
    def table_direction(self) -> WD_TABLE_DIRECTION:
        """
        A member of :ref:`WdTableDirection` indicating the direction in which
        the table cells are ordered, e.g. `WD_TABLE_DIRECTION.LTR`. |None|
        indicates the value is inherited from the style hierarchy.
        """
        ...
    
    @table_direction.setter
    def table_direction(self, value) -> None:
        ...
    


class _Cell(BlockItemContainer):
    """Table cell"""
    def __init__(self, tc, parent) -> None:
        ...
    
    def add_paragraph(self, text: str=..., style: str | None=...) -> Paragraph:
        """
        Return a paragraph newly added to the end of the content in this
        cell. If present, *text* is added to the paragraph in a single run.
        If specified, the paragraph style *style* is applied. If *style* is
        not specified or is |None|, the result is as though the 'Normal'
        style was applied. Note that the formatting of text in a cell can be
        influenced by the table style. *text* can contain tab (``\\t``)
        characters, which are converted to the appropriate XML form for
        a tab. *text* can also include newline (``\\n``) or carriage return
        (``\\r``) characters, each of which is converted to a line break.
        """
        ...
    
    def add_table(self, rows: int, cols: int) -> Table:
        """
        Return a table newly added to this cell after any existing cell
        content, having *rows* rows and *cols* columns. An empty paragraph is
        added after the table because Word requires a paragraph element as
        the last element in every cell.
        """
        ...
    
    def merge(self, other_cell: _Cell | Any) -> _Cell:
        """
        Return a merged cell created by spanning the rectangular region
        having this cell and *other_cell* as diagonal corners. Raises
        |InvalidSpanError| if the cells do not define a rectangular region.
        """
        ...
    
    @property
    def paragraphs(self) -> list[Paragraph]:
        """
        List of paragraphs in the cell. A table cell is required to contain
        at least one block-level element and end with a paragraph. By
        default, a new cell contains a single paragraph. Read-only
        """
        ...
    
    @property
    def tables(self) -> list[Table]:
        """
        List of tables in the cell, in the order they appear. Read-only.
        """
        ...
    
    @property
    def text(self) -> str:
        """
        The entire contents of this cell as a string of text. Assigning
        a string to this property replaces all existing content with a single
        paragraph containing the assigned text in a single run.
        """
        ...
    
    @text.setter
    def text(self, text) -> None:
        """
        Write-only. Set entire contents of cell to the string *text*. Any
        existing content or revisions are replaced.
        """
        ...
    
    @property
    def vertical_alignment(self) -> None:
        """Member of :ref:`WdCellVerticalAlignment` or None.

        A value of |None| indicates vertical alignment for this cell is
        inherited. Assigning |None| causes any explicitly defined vertical
        alignment to be removed, restoring inheritance.
        """
        ...
    
    @vertical_alignment.setter
    def vertical_alignment(self, value) -> None:
        ...
    
    @property
    def width(self) -> Any | None:
        """
        The width of this cell in EMU, or |None| if no explicit width is set.
        """
        ...
    
    @width.setter
    def width(self, value) -> None:
        ...
    


class _Column(Parented):
    """
    Table column
    """
    def __init__(self, gridCol, parent) -> None:
        ...
    
    @property
    def cells(self): # -> tuple[Unknown, ...]:
        """
        Sequence of |_Cell| instances corresponding to cells in this column.
        """
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table| object this column belongs to.
        """
        ...
    
    @property
    def width(self):
        """
        The width of this column in EMU, or |None| if no explicit width is
        set.
        """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class _Columns(Parented):
    """
    Sequence of |_Column| instances corresponding to the columns in a table.
    Supports ``len()``, iteration and indexed access.
    """
    def __init__(self, tbl, parent) -> None:
        ...
    
    def __getitem__(self, idx): # -> _Column:
        """
        Provide indexed access, e.g. 'columns[0]'
        """
        ...
    
    def __iter__(self): # -> Generator[_Column, Any, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table| object this column collection belongs to.
        """
        ...
    


class _Row(Parented):
    """
    Table row
    """
    def __init__(self, tr, parent) -> None:
        ...
    
    @property
    def cells(self): # -> tuple[Unknown, ...]:
        """
        Sequence of |_Cell| instances corresponding to cells in this row.
        """
        ...
    
    @property
    def height(self):
        """
        Return a |Length| object representing the height of this cell, or
        |None| if no explicit height is set.
        """
        ...
    
    @height.setter
    def height(self, value): # -> None:
        ...
    
    @property
    def height_rule(self):
        """
        Return the height rule of this cell as a member of the
        :ref:`WdRowHeightRule` enumeration, or |None| if no explicit
        height_rule is set.
        """
        ...
    
    @height_rule.setter
    def height_rule(self, value): # -> None:
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table| object this row belongs to.
        """
        ...
    


class _Rows(Parented):
    """
    Sequence of |_Row| objects corresponding to the rows in a table.
    Supports ``len()``, iteration, indexed access, and slicing.
    """
    def __init__(self, tbl, parent) -> None:
        ...
    
    def __getitem__(self, idx):
        """
        Provide indexed access, (e.g. 'rows[0]')
        """
        ...
    
    def __iter__(self): # -> Generator[_Row, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table| object this row collection belongs to.
        """
        ...
    


