"""
This type stub file was generated by pyright.
"""

from ..shared import Parented

"""
Paragraph-related proxy types.
"""
class Paragraph(Parented):
    """
    Proxy object wrapping ``<w:p>`` element.
    """
    def __init__(self, p, parent) -> None:
        ...
    
    def add_run(self, text=..., style=...): # -> Run:
        """
        Append a run to this paragraph containing *text* and having character
        style identified by style ID *style*. *text* can contain tab
        (``\\t``) characters, which are converted to the appropriate XML form
        for a tab. *text* can also include newline (``\\n``) or carriage
        return (``\\r``) characters, each of which is converted to a line
        break.
        """
        ...
    
    @property
    def alignment(self):
        """
        A member of the :ref:`WdParagraphAlignment` enumeration specifying
        the justification setting for this paragraph. A value of |None|
        indicates the paragraph has no directly-applied alignment value and
        will inherit its alignment value from its style hierarchy. Assigning
        |None| to this property removes any directly-applied alignment value.
        """
        ...
    
    @alignment.setter
    def alignment(self, value): # -> None:
        ...
    
    def clear(self): # -> Self@Paragraph:
        """
        Return this same paragraph after removing all its content.
        Paragraph-level formatting, such as style, is preserved.
        """
        ...
    
    def insert_paragraph_before(self, text=..., style=...): # -> Paragraph:
        """
        Return a newly created paragraph, inserted directly before this
        paragraph. If *text* is supplied, the new paragraph contains that
        text in a single run. If *style* is provided, that style is assigned
        to the new paragraph.
        """
        ...
    
    @property
    def paragraph_format(self): # -> ParagraphFormat:
        """
        The |ParagraphFormat| object providing access to the formatting
        properties for this paragraph, such as line spacing and indentation.
        """
        ...
    
    @property
    def runs(self): # -> list[Run]:
        """
        Sequence of |Run| instances corresponding to the <w:r> elements in
        this paragraph.
        """
        ...
    
    @property
    def style(self):
        """
        Read/Write. |_ParagraphStyle| object representing the style assigned
        to this paragraph. If no explicit style is assigned to this
        paragraph, its value is the default paragraph style for the document.
        A paragraph style name can be assigned in lieu of a paragraph style
        object. Assigning |None| removes any applied style, making its
        effective value the default paragraph style for the document.
        """
        ...
    
    @style.setter
    def style(self, style_or_name): # -> None:
        ...
    
    @property
    def text(self): # -> Literal['']:
        """
        String formed by concatenating the text of each run in the paragraph.
        Tabs and line breaks in the XML are mapped to ``\\t`` and ``\\n``
        characters respectively.

        Assigning text to this property causes all existing paragraph content
        to be replaced with a single run containing the assigned text.
        A ``\\t`` character in the text is mapped to a ``<w:tab/>`` element
        and each ``\\n`` or ``\\r`` character is mapped to a line break.
        Paragraph-level formatting, such as style, is preserved. All
        run-level formatting, such as bold or italic, is removed.
        """
        ...
    
    @text.setter
    def text(self, text): # -> None:
        ...
    


