"""
This type stub file was generated by pyright.
"""

from ..shared import Parented

"""
Run-related proxy objects for python-docx, Run in particular.
"""
class Run(Parented):
    """
    Proxy object wrapping ``<w:r>`` element. Several of the properties on Run
    take a tri-state value, |True|, |False|, or |None|. |True| and |False|
    correspond to on and off respectively. |None| indicates the property is
    not specified directly on the run and its effective value is taken from
    the style hierarchy.
    """
    def __init__(self, r, parent) -> None:
        ...
    
    def add_break(self, break_type=...): # -> None:
        """
        Add a break element of *break_type* to this run. *break_type* can
        take the values `WD_BREAK.LINE`, `WD_BREAK.PAGE`, and
        `WD_BREAK.COLUMN` where `WD_BREAK` is imported from `docx.enum.text`.
        *break_type* defaults to `WD_BREAK.LINE`.
        """
        ...
    
    def add_picture(self, image_path_or_stream, width=..., height=...): # -> InlineShape:
        """
        Return an |InlineShape| instance containing the image identified by
        *image_path_or_stream*, added to the end of this run.
        *image_path_or_stream* can be a path (a string) or a file-like object
        containing a binary image. If neither width nor height is specified,
        the picture appears at its native size. If only one is specified, it
        is used to compute a scaling factor that is then applied to the
        unspecified dimension, preserving the aspect ratio of the image. The
        native size of the picture is calculated using the dots-per-inch
        (dpi) value specified in the image file, defaulting to 72 dpi if no
        value is specified, as is often the case.
        """
        ...
    
    def add_tab(self): # -> None:
        """
        Add a ``<w:tab/>`` element at the end of the run, which Word
        interprets as a tab character.
        """
        ...
    
    def add_text(self, text): # -> _Text:
        """
        Returns a newly appended |_Text| object (corresponding to a new
        ``<w:t>`` child element) to the run, containing *text*. Compare with
        the possibly more friendly approach of assigning text to the
        :attr:`Run.text` property.
        """
        ...
    
    @property
    def bold(self): # -> None:
        """
        Read/write. Causes the text of the run to appear in bold.
        """
        ...
    
    @bold.setter
    def bold(self, value): # -> None:
        ...
    
    def clear(self): # -> Self@Run:
        """
        Return reference to this run after removing all its content. All run
        formatting is preserved.
        """
        ...
    
    @property
    def font(self): # -> Font:
        """
        The |Font| object providing access to the character formatting
        properties for this run, such as font name and size.
        """
        ...
    
    @property
    def italic(self): # -> None:
        """
        Read/write tri-state value. When |True|, causes the text of the run
        to appear in italics.
        """
        ...
    
    @italic.setter
    def italic(self, value): # -> None:
        ...
    
    @property
    def style(self):
        """
        Read/write. A |_CharacterStyle| object representing the character
        style applied to this run. The default character style for the
        document (often `Default Character Font`) is returned if the run has
        no directly-applied character style. Setting this property to |None|
        removes any directly-applied character style.
        """
        ...
    
    @style.setter
    def style(self, style_or_name): # -> None:
        ...
    
    @property
    def text(self):
        """
        String formed by concatenating the text equivalent of each run
        content child element into a Python string. Each ``<w:t>`` element
        adds the text characters it contains. A ``<w:tab/>`` element adds
        a ``\\t`` character. A ``<w:cr/>`` or ``<w:br>`` element each add
        a ``\\n`` character. Note that a ``<w:br>`` element can indicate
        a page break or column break as well as a line break. All ``<w:br>``
        elements translate to a single ``\\n`` character regardless of their
        type. All other content child elements, such as ``<w:drawing>``, are
        ignored.

        Assigning text to this property has the reverse effect, translating
        each ``\\t`` character to a ``<w:tab/>`` element and each ``\\n`` or
        ``\\r`` character to a ``<w:cr/>`` element. Any existing run content
        is replaced. Run formatting is preserved.
        """
        ...
    
    @text.setter
    def text(self, text): # -> None:
        ...
    
    @property
    def underline(self): # -> None:
        """
        The underline style for this |Run|, one of |None|, |True|, |False|,
        or a value from :ref:`WdUnderline`. A value of |None| indicates the
        run has no directly-applied underline value and so will inherit the
        underline value of its containing paragraph. Assigning |None| to this
        property removes any directly-applied underline value. A value of
        |False| indicates a directly-applied setting of no underline,
        overriding any inherited value. A value of |True| indicates single
        underline. The values from :ref:`WdUnderline` are used to specify
        other outline styles such as double, wavy, and dotted.
        """
        ...
    
    @underline.setter
    def underline(self, value): # -> None:
        ...
    


class _Text:
    """
    Proxy object wrapping ``<w:t>`` element.
    """
    def __init__(self, t_elm) -> None:
        ...
    


