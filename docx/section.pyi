"""
This type stub file was generated by pyright.
"""
from typing import Any

from docx.parts.hdrftr import HeaderPart, FooterPart

from docx.blkcntnr import BlockItemContainer
from docx.compat import Sequence
from docx.shared import lazyproperty, Length, Inches
from enum.section import WD_ORIENT, WD_SECTION

"""The |Section| object and related proxy classes"""
class Sections(Sequence):
    """Sequence of |Section| objects corresponding to the sections in the document.

    Supports ``len()``, iteration, and indexed access.
    """
    def __init__(self, document_elm, document_part) -> None:
        ...
    
    def __getitem__(self, key): # -> list[Section] | Section:
        ...
    
    def __iter__(self): # -> Generator[Section, Any, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    


class Section:
    """Document section, providing access to section and page setup settings.

    Also provides access to headers and footers.
    """
    def __init__(self, sectPr, document_part) -> None:
        ...
    
    @property
    def bottom_margin(self) -> Length:
        """
        |Length| object representing the bottom margin for all pages in this
        section in English Metric Units.
        """
        ...
    
    @bottom_margin.setter
    def bottom_margin(self, value): # -> None:
        ...
    
    @property
    def different_first_page_header_footer(self) -> bool:
        """True if this section displays a distinct first-page header and footer.

        Read/write. The definition of the first-page header and footer are accessed
        using :attr:`.first_page_header` and :attr:`.first_page_footer` respectively.
        """
        ...
    
    @different_first_page_header_footer.setter
    def different_first_page_header_footer(self, value): # -> None:
        ...
    
    @property
    def even_page_footer(self) -> _Footer:
        """|_Footer| object defining footer content for even pages.

        The content of this footer definition is ignored unless the document setting
        :attr:`~.Settings.odd_and_even_pages_header_footer` is set True.
        """
        ...
    
    @property
    def even_page_header(self) -> _Header:
        """|_Header| object defining header content for even pages.

        The content of this header definition is ignored unless the document setting
        :attr:`~.Settings.odd_and_even_pages_header_footer` is set True.
        """
        ...
    
    @property
    def first_page_footer(self) -> _Footer:
        """|_Footer| object defining footer content for the first page of this section.

        The content of this footer definition is ignored unless the property
        :attr:`.different_first_page_header_footer` is set True.
        """
        ...
    
    @property
    def first_page_header(self) -> _Header:
        """|_Header| object defining header content for the first page of this section.

        The content of this header definition is ignored unless the property
        :attr:`.different_first_page_header_footer` is set True.
        """
        ...
    
    @lazyproperty
    def footer(self) -> _Footer:
        """|_Footer| object representing default page footer for this section.

        The default footer is used for odd-numbered pages when separate odd/even footers
        are enabled. It is used for both odd and even-numbered pages otherwise.
        """
        ...
    
    @property
    def footer_distance(self) -> Length:
        """
        |Length| object representing the distance from the bottom edge of the
        page to the bottom edge of the footer. |None| if no setting is present
        in the XML.
        """
        ...
    
    @footer_distance.setter
    def footer_distance(self, value: Length) -> None:
        ...
    
    @property
    def gutter(self) -> Length:
        """
        |Length| object representing the page gutter size in English Metric
        Units for all pages in this section. The page gutter is extra spacing
        added to the *inner* margin to ensure even margins after page
        binding.
        """
        ...
    
    @gutter.setter
    def gutter(self, value: Length) -> None:
        ...
    
    @lazyproperty
    def header(self) -> _Header:
        """|_Header| object representing default page header for this section.

        The default header is used for odd-numbered pages when separate odd/even headers
        are enabled. It is used for both odd and even-numbered pages otherwise.
        """
        ...
    
    @property
    def header_distance(self) -> Length:
        """
        |Length| object representing the distance from the top edge of the
        page to the top edge of the header. |None| if no setting is present
        in the XML.
        """
        ...
    
    @header_distance.setter
    def header_distance(self, value: Length) -> None:
        ...
    
    @property
    def left_margin(self) -> Length:
        """
        |Length| object representing the left margin for all pages in this
        section in English Metric Units.
        """
        ...
    
    @left_margin.setter
    def left_margin(self, value: Length) -> None:
        ...
    
    @property
    def orientation(self) -> WD_ORIENT:
        """
        Member of the :ref:`WdOrientation` enumeration specifying the page
        orientation for this section, one of ``WD_ORIENT.PORTRAIT`` or
        ``WD_ORIENT.LANDSCAPE``.
        """
        ...
    
    @orientation.setter
    def orientation(self, value: WD_ORIENT) -> None:
        ...
    
    @property
    def page_height(self) -> Inches | Any:
        """
        Total page height used for this section, inclusive of all edge spacing
        values such as margins. Page orientation is taken into account, so
        for example, its expected value would be ``Inches(8.5)`` for
        letter-sized paper when orientation is landscape.
        """
        ...
    
    @page_height.setter
    def page_height(self, value: Inches | Any) -> None:
        ...
    
    @property
    def page_width(self) -> Inches | Any:
        """
        Total page width used for this section, inclusive of all edge spacing
        values such as margins. Page orientation is taken into account, so
        for example, its expected value would be ``Inches(11)`` for
        letter-sized paper when orientation is landscape.
        """
        ...
    
    @page_width.setter
    def page_width(self, value: Inches | Any) -> None:
        ...
    
    @property
    def right_margin(self) -> Length:
        """
        |Length| object representing the right margin for all pages in this
        section in English Metric Units.
        """
        ...
    
    @right_margin.setter
    def right_margin(self, value: Length) -> None:
        ...
    
    @property
    def start_type(self) -> WD_SECTION:
        """
        The member of the :ref:`WdSectionStart` enumeration corresponding to
        the initial break behavior of this section, e.g.
        ``WD_SECTION.ODD_PAGE`` if the section should begin on the next odd
        page.
        """
        ...
    
    @start_type.setter
    def start_type(self, value: WD_SECTION) -> None:
        ...
    
    @property
    def top_margin(self):
        """
        |Length| object representing the top margin for all pages in this
        section in English Metric Units.
        """
        ...
    
    @top_margin.setter
    def top_margin(self, value): # -> None:
        ...
    


class _BaseHeaderFooter(BlockItemContainer):
    """Base class for header and footer classes"""
    def __init__(self, sectPr, document_part, header_footer_index) -> None:
        ...
    
    @property
    def is_linked_to_previous(self) -> bool:
        """``True`` if this header/footer uses the definition from the prior section.

        ``False`` if this header/footer has an explicit definition.

        Assigning ``True`` to this property removes the header/footer definition for
        this section, causing it to "inherit" the corresponding definition of the prior
        section. Assigning ``False`` causes a new, empty definition to be added for this
        section, but only if no definition is already present.
        """
        ...
    
    @is_linked_to_previous.setter
    def is_linked_to_previous(self, value: bool) -> None:
        ...
    
    @property
    def part(self) -> HeaderPart | FooterPart:
        """The |HeaderPart| or |FooterPart| for this header/footer.

        This overrides `BlockItemContainer.part` and is required to support image
        insertion and perhaps other content like hyperlinks.
        """
        ...
    


class _Footer(_BaseHeaderFooter):
    """Page footer, used for all three types (default, even-page, and first-page).

    Note that, like a document or table cell, a footer must contain a minimum of one
    paragraph and a new or otherwise "empty" footer contains a single empty paragraph.
    This first paragraph can be accessed as `footer.paragraphs[0]` for purposes of
    adding content to it. Using :meth:`add_paragraph()` by itself to add content will
    leave an empty paragraph above the newly added one.
    """
    ...


class _Header(_BaseHeaderFooter):
    """Page header, used for all three types (default, even-page, and first-page).

    Note that, like a document or table cell, a header must contain a minimum of one
    paragraph and a new or otherwise "empty" header contains a single empty paragraph.
    This first paragraph can be accessed as `header.paragraphs[0]` for purposes of
    adding content to it. Using :meth:`add_paragraph()` by itself to add content will
    leave an empty paragraph above the newly added one.
    """
    ...


