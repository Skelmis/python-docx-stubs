"""
This type stub file was generated by pyright.
"""
from typing import TextIO, BinaryIO

from docx.enum.section import WD_SECTION_START

from docx.parts.document import DocumentPart

from docx.settings import Settings

from docx.opc.coreprops import CoreProperties

from docx.shape import InlineShape, InlineShapes

from docx.table import Table

from docx.styles.styles import Styles

from docx.section import Sections, Section

from docx.text.paragraph import Paragraph

from docx.blkcntnr import BlockItemContainer
from docx.shared import ElementProxy

"""|Document| and closely related objects"""
class Document(ElementProxy):
    """WordprocessingML (WML) document.

    Not intended to be constructed directly. Use :func:`docx.Document` to open or create
    a document.
    """
    __slots__ = ...
    def __init__(self, element, part) -> None:
        ...
    
    def add_heading(self, text: str=..., level: int=...) -> Paragraph:
        """Return a heading paragraph newly added to the end of the document.

        The heading paragraph will contain *text* and have its paragraph style
        determined by *level*. If *level* is 0, the style is set to `Title`. If *level*
        is 1 (or omitted), `Heading 1` is used. Otherwise the style is set to `Heading
        {level}`. Raises |ValueError| if *level* is outside the range 0-9.
        """
        ...
    
    def add_page_break(self) -> Paragraph:
        """Return newly |Paragraph| object containing only a page break."""
        ...
    
    def add_paragraph(self, text: str=..., style: str | None=...) -> Paragraph:
        """
        Return a paragraph newly added to the end of the document, populated
        with *text* and having paragraph style *style*. *text* can contain
        tab (``\\t``) characters, which are converted to the appropriate XML
        form for a tab. *text* can also include newline (``\\n``) or carriage
        return (``\\r``) characters, each of which is converted to a line
        break.
        """
        ...
    
    def add_picture(self, image_path_or_stream, width: float | None=..., height: float | None=...) -> InlineShape:
        """
        Return a new picture shape added in its own paragraph at the end of
        the document. The picture contains the image at
        *image_path_or_stream*, scaled based on *width* and *height*. If
        neither width nor height is specified, the picture appears at its
        native size. If only one is specified, it is used to compute
        a scaling factor that is then applied to the unspecified dimension,
        preserving the aspect ratio of the image. The native size of the
        picture is calculated using the dots-per-inch (dpi) value specified
        in the image file, defaulting to 72 dpi if no value is specified, as
        is often the case.
        """
        ...
    
    def add_section(self, start_type: WD_SECTION_START=...) -> Section:
        """
        Return a |Section| object representing a new section added at the end
        of the document. The optional *start_type* argument must be a member
        of the :ref:`WdSectionStart` enumeration, and defaults to
        ``WD_SECTION.NEW_PAGE`` if not provided.
        """
        ...
    
    def add_table(self, rows: int, cols: int, style: str | None=...) -> Table:
        """
        Add a table having row and column counts of *rows* and *cols*
        respectively and table style of *style*. *style* may be a paragraph
        style object or a paragraph style name. If *style* is |None|, the
        table inherits the default table style of the document.
        """
        ...
    
    @property
    def core_properties(self) -> CoreProperties:
        """
        A |CoreProperties| object providing read/write access to the core
        properties of this document.
        """
        ...
    
    @property
    def inline_shapes(self) -> InlineShapes:
        """
        An |InlineShapes| object providing access to the inline shapes in
        this document. An inline shape is a graphical object, such as
        a picture, contained in a run of text and behaving like a character
        glyph, being flowed like other text in a paragraph.
        """
        ...
    
    @property
    def paragraphs(self) -> list[Paragraph]:
        """
        A list of |Paragraph| instances corresponding to the paragraphs in
        the document, in document order. Note that paragraphs within revision
        marks such as ``<w:ins>`` or ``<w:del>`` do not appear in this list.
        """
        ...
    
    @property
    def part(self) -> DocumentPart:
        """
        The |DocumentPart| object of this document.
        """
        ...
    
    def save(self, path_or_stream: str | TextIO | BinaryIO) -> None:
        """
        Save this document to *path_or_stream*, which can be either a path to
        a filesystem location (a string) or a file-like object.
        """
        ...
    
    @property
    def sections(self) -> Sections:
        """|Sections| object providing access to each section in this document."""
        ...
    
    @property
    def settings(self) -> Settings:
        """
        A |Settings| object providing access to the document-level settings
        for this document.
        """
        ...
    
    @property
    def styles(self) -> Styles:
        """
        A |Styles| object providing access to the styles in this document.
        """
        ...
    
    @property
    def tables(self) -> list[Table]:
        """
        A list of |Table| instances corresponding to the tables in the
        document, in document order. Note that only tables appearing at the
        top level of the document appear in this list; a table nested inside
        a table cell does not appear. A table within revision marks such as
        ``<w:ins>`` or ``<w:del>`` will also not appear in the list.
        """
        ...
    


class _Body(BlockItemContainer):
    """
    Proxy for ``<w:body>`` element in this document, having primarily a
    container role.
    """
    def __init__(self, body_elm, parent) -> None:
        ...
    
    def clear_content(self) -> "_Body":
        """
        Return this |_Body| instance after clearing it of all content.
        Section properties for the main document story, if present, are
        preserved.
        """
        ...
    


