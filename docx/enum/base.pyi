"""
This type stub file was generated by pyright.
"""

"""
Base classes and other objects used by enumerations
"""
def alias(*aliases): # -> (cls: Unknown) -> Unknown:
    """
    Decorating a class with @alias('FOO', 'BAR', ..) allows the class to
    be referenced by each of the names provided as arguments.
    """
    ...

class _DocsPageFormatter:
    """Generate an .rst doc page for an enumeration.

    Formats a RestructuredText documention page (string) for the enumeration
    class parts passed to the constructor. An immutable one-shot service
    object.
    """
    def __init__(self, clsname, clsdict) -> None:
        ...
    
    @property
    def page_str(self): # -> str:
        """
        The RestructuredText documentation page for the enumeration. This is
        the only API member for the class.
        """
        ...
    


class MetaEnumeration(type):
    """
    The metaclass for Enumeration and its subclasses. Adds a name for each
    named member and compiles state needed by the enumeration class to
    respond to other attribute gets
    """
    def __new__(meta, clsname, bases, clsdict): # -> Self@MetaEnumeration:
        ...
    


class EnumerationBase:
    """
    Base class for all enumerations, used directly for enumerations requiring
    only basic behavior. It's __dict__ is used below in the Python 2+3
    compatible metaclass definition.
    """
    __members__ = ...
    __ms_name__ = ...
    @classmethod
    def validate(cls, value): # -> None:
        """
        Raise |ValueError| if *value* is not an assignable value.
        """
        ...
    


Enumeration = ...
class XmlEnumeration(Enumeration):
    """
    Provides ``to_xml()`` and ``from_xml()`` methods in addition to base
    enumeration features
    """
    __members__ = ...
    __ms_name__ = ...
    @classmethod
    def from_xml(cls, xml_val):
        """
        Return the enumeration member corresponding to the XML value
        *xml_val*.
        """
        ...
    
    @classmethod
    def to_xml(cls, enum_val):
        """
        Return the XML value of the enumeration value *enum_val*.
        """
        ...
    


class EnumMember:
    """
    Used in the enumeration class definition to define a member value and its
    mappings
    """
    def __init__(self, name, value, docstring) -> None:
        ...
    
    def add_to_enum(self, clsdict): # -> None:
        """
        Add a name to *clsdict* for this member.
        """
        ...
    
    @property
    def docstring(self): # -> Unknown:
        """
        The description of this member
        """
        ...
    
    @property
    def name(self): # -> Unknown:
        """
        The distinguishing name of this member within the enumeration class,
        e.g. 'MIDDLE' for MSO_VERTICAL_ANCHOR.MIDDLE, if this is a named
        member. Otherwise the primitive value such as |None|, |True| or
        |False|.
        """
        ...
    
    def register_name(self, clsdict): # -> None:
        """
        Add a member name to the class dict *clsdict* containing the value of
        this member object. Where the name of this object is None, do
        nothing; this allows out-of-band values to be defined without adding
        a name to the class dict.
        """
        ...
    
    @property
    def valid_settings(self): # -> tuple[EnumValue | Unknown]:
        """
        A sequence containing the values valid for assignment for this
        member. May be zero, one, or more in number.
        """
        ...
    
    @property
    def value(self): # -> EnumValue | Unknown:
        """
        The enumeration value for this member, often an instance of
        EnumValue, but may be a primitive value such as |None|.
        """
        ...
    


class EnumValue(int):
    """
    A named enumeration value, providing __str__ and __doc__ string values
    for its symbolic name and description, respectively. Subclasses int, so
    behaves as a regular int unless the strings are asked for.
    """
    def __new__(cls, member_name, int_value, docstring): # -> Self@EnumValue:
        ...
    
    def __init__(self, member_name, int_value, docstring) -> None:
        ...
    
    @property
    def __doc__(self):
        """
        The description of this enumeration member
        """
        ...
    
    def __str__(self) -> str:
        """
        The symbolic name and string value of this member, e.g. 'MIDDLE (3)'
        """
        ...
    


class ReturnValueOnlyEnumMember(EnumMember):
    """
    Used to define a member of an enumeration that is only valid as a query
    result and is not valid as a setting, e.g. MSO_VERTICAL_ANCHOR.MIXED (-2)
    """
    @property
    def valid_settings(self): # -> tuple[()]:
        """
        No settings are valid for a return-only value.
        """
        ...
    


class XmlMappedEnumMember(EnumMember):
    """
    Used to define a member whose value maps to an XML attribute value.
    """
    def __init__(self, name, value, xml_value, docstring) -> None:
        ...
    
    def add_to_enum(self, clsdict): # -> None:
        """
        Compile XML mappings in addition to base add behavior.
        """
        ...
    
    def register_xml_mapping(self, clsdict): # -> None:
        """
        Add XML mappings to the enumeration class state for this member.
        """
        ...
    
    @property
    def xml_value(self): # -> Unknown:
        """
        The XML attribute value that corresponds to this enumeration value
        """
        ...
    


