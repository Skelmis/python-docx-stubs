"""
This type stub file was generated by pyright.
"""

from .image import BaseImageHeader

"""
Objects related to parsing headers of JPEG image streams, both JFIF and Exif
sub-formats.
"""
class Jpeg(BaseImageHeader):
    """
    Base class for JFIF and EXIF subclasses.
    """
    @property
    def content_type(self): # -> Literal['image/jpeg']:
        """
        MIME content type for this image, unconditionally `image/jpeg` for
        JPEG images.
        """
        ...
    
    @property
    def default_ext(self): # -> Literal['jpg']:
        """
        Default filename extension, always 'jpg' for JPG images.
        """
        ...
    


class Exif(Jpeg):
    """
    Image header parser for Exif image format
    """
    @classmethod
    def from_stream(cls, stream): # -> Self@Exif:
        """
        Return |Exif| instance having header properties parsed from Exif
        image in *stream*.
        """
        ...
    


class Jfif(Jpeg):
    """
    Image header parser for JFIF image format
    """
    @classmethod
    def from_stream(cls, stream): # -> Self@Jfif:
        """
        Return a |Jfif| instance having header properties parsed from image
        in *stream*.
        """
        ...
    


class _JfifMarkers:
    """
    Sequence of markers in a JPEG file, perhaps truncated at first SOS marker
    for performance reasons.
    """
    def __init__(self, markers) -> None:
        ...
    
    def __str__(self) -> str:
        """
        Returns a tabular listing of the markers in this instance, which can
        be handy for debugging and perhaps other uses.
        """
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_JfifMarkers:
        """
        Return a |_JfifMarkers| instance containing a |_JfifMarker| subclass
        instance for each marker in *stream*.
        """
        ...
    
    @property
    def app0(self):
        """
        First APP0 marker in image markers.
        """
        ...
    
    @property
    def app1(self):
        """
        First APP1 marker in image markers.
        """
        ...
    
    @property
    def sof(self):
        """
        First start of frame (SOFn) marker in this sequence.
        """
        ...
    


class _MarkerParser:
    """
    Service class that knows how to parse a JFIF stream and iterate over its
    markers.
    """
    def __init__(self, stream_reader) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_MarkerParser:
        """
        Return a |_MarkerParser| instance to parse JFIF markers from
        *stream*.
        """
        ...
    
    def iter_markers(self): # -> Generator[_App0Marker | _App1Marker | _SofMarker | _Marker, Any, None]:
        """
        Generate a (marker_code, segment_offset) 2-tuple for each marker in
        the JPEG *stream*, in the order they occur in the stream.
        """
        ...
    


class _MarkerFinder:
    """
    Service class that knows how to find the next JFIF marker in a stream.
    """
    def __init__(self, stream) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_MarkerFinder:
        """
        Return a |_MarkerFinder| instance to find JFIF markers in *stream*.
        """
        ...
    
    def next(self, start): # -> tuple[Unknown, Unknown]:
        """
        Return a (marker_code, segment_offset) 2-tuple identifying and
        locating the first marker in *stream* occuring after offset *start*.
        The returned *segment_offset* points to the position immediately
        following the 2-byte marker code, the start of the marker segment,
        for those markers that have a segment.
        """
        ...
    


class _Marker:
    """
    Base class for JFIF marker classes. Represents a marker and its segment
    occuring in a JPEG byte stream.
    """
    def __init__(self, marker_code, offset, segment_length) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_Marker:
        """
        Return a generic |_Marker| instance for the marker at *offset* in
        *stream* having *marker_code*.
        """
        ...
    
    @property
    def marker_code(self): # -> Unknown:
        """
        The single-byte code that identifies the type of this marker, e.g.
        ``'\xE0'`` for start of image (SOI).
        """
        ...
    
    @property
    def name(self): # -> str:
        ...
    
    @property
    def offset(self): # -> Unknown:
        ...
    
    @property
    def segment_length(self): # -> Unknown:
        """
        The length in bytes of this marker's segment
        """
        ...
    


class _App0Marker(_Marker):
    """
    Represents a JFIF APP0 marker segment.
    """
    def __init__(self, marker_code, offset, length, density_units, x_density, y_density) -> None:
        ...
    
    @property
    def horz_dpi(self): # -> Unknown | int:
        """
        Horizontal dots per inch specified in this marker, defaults to 72 if
        not specified.
        """
        ...
    
    @property
    def vert_dpi(self): # -> Unknown | int:
        """
        Vertical dots per inch specified in this marker, defaults to 72 if
        not specified.
        """
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_App0Marker:
        """
        Return an |_App0Marker| instance for the APP0 marker at *offset* in
        *stream*.
        """
        ...
    


class _App1Marker(_Marker):
    """
    Represents a JFIF APP1 (Exif) marker segment.
    """
    def __init__(self, marker_code, offset, length, horz_dpi, vert_dpi) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_App1Marker:
        """
        Extract the horizontal and vertical dots-per-inch value from the APP1
        header at *offset* in *stream*.
        """
        ...
    
    @property
    def horz_dpi(self): # -> Unknown:
        """
        Horizontal dots per inch specified in this marker, defaults to 72 if
        not specified.
        """
        ...
    
    @property
    def vert_dpi(self): # -> Unknown:
        """
        Vertical dots per inch specified in this marker, defaults to 72 if
        not specified.
        """
        ...
    


class _SofMarker(_Marker):
    """
    Represents a JFIF start of frame (SOFx) marker segment.
    """
    def __init__(self, marker_code, offset, segment_length, px_width, px_height) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_SofMarker:
        """
        Return an |_SofMarker| instance for the SOFn marker at *offset* in
        stream.
        """
        ...
    
    @property
    def px_height(self): # -> Unknown:
        """
        Image height in pixels
        """
        ...
    
    @property
    def px_width(self): # -> Unknown:
        """
        Image width in pixels
        """
        ...
    


