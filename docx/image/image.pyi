"""
This type stub file was generated by pyright.
"""

from ..shared import lazyproperty

"""
Provides objects that can characterize image streams as to content type and
size, as a required step in including them in a document.
"""
class Image:
    """
    Graphical image stream such as JPEG, PNG, or GIF with properties and
    methods required by ImagePart.
    """
    def __init__(self, blob, filename, image_header) -> None:
        ...
    
    @classmethod
    def from_blob(cls, blob): # -> Self@Image:
        """
        Return a new |Image| subclass instance parsed from the image binary
        contained in *blob*.
        """
        ...
    
    @classmethod
    def from_file(cls, image_descriptor): # -> Self@Image:
        """
        Return a new |Image| subclass instance loaded from the image file
        identified by *image_descriptor*, a path or file-like object.
        """
        ...
    
    @property
    def blob(self): # -> Unknown:
        """
        The bytes of the image 'file'
        """
        ...
    
    @property
    def content_type(self):
        """
        MIME content type for this image, e.g. ``'image/jpeg'`` for a JPEG
        image
        """
        ...
    
    @lazyproperty
    def ext(self):
        """
        The file extension for the image. If an actual one is available from
        a load filename it is used. Otherwise a canonical extension is
        assigned based on the content type. Does not contain the leading
        period, e.g. 'jpg', not '.jpg'.
        """
        ...
    
    @property
    def filename(self): # -> Unknown:
        """
        Original image file name, if loaded from disk, or a generic filename
        if loaded from an anonymous stream.
        """
        ...
    
    @property
    def px_width(self):
        """
        The horizontal pixel dimension of the image
        """
        ...
    
    @property
    def px_height(self):
        """
        The vertical pixel dimension of the image
        """
        ...
    
    @property
    def horz_dpi(self):
        """
        Integer dots per inch for the width of this image. Defaults to 72
        when not present in the file, as is often the case.
        """
        ...
    
    @property
    def vert_dpi(self):
        """
        Integer dots per inch for the height of this image. Defaults to 72
        when not present in the file, as is often the case.
        """
        ...
    
    @property
    def width(self): # -> Inches:
        """
        A |Length| value representing the native width of the image,
        calculated from the values of `px_width` and `horz_dpi`.
        """
        ...
    
    @property
    def height(self): # -> Inches:
        """
        A |Length| value representing the native height of the image,
        calculated from the values of `px_height` and `vert_dpi`.
        """
        ...
    
    def scaled_dimensions(self, width=..., height=...): # -> tuple[Inches, Inches] | tuple[Emu, Emu]:
        """
        Return a (cx, cy) 2-tuple representing the native dimensions of this
        image scaled by applying the following rules to *width* and *height*.
        If both *width* and *height* are specified, the return value is
        (*width*, *height*); no scaling is performed. If only one is
        specified, it is used to compute a scaling factor that is then
        applied to the unspecified dimension, preserving the aspect ratio of
        the image. If both *width* and *height* are |None|, the native
        dimensions are returned. The native dimensions are calculated using
        the dots-per-inch (dpi) value embedded in the image, defaulting to 72
        dpi if no value is specified, as is often the case. The returned
        values are both |Length| objects.
        """
        ...
    
    @lazyproperty
    def sha1(self): # -> str:
        """
        SHA1 hash digest of the image blob
        """
        ...
    


class BaseImageHeader:
    """
    Base class for image header subclasses like |Jpeg| and |Tiff|.
    """
    def __init__(self, px_width, px_height, horz_dpi, vert_dpi) -> None:
        ...
    
    @property
    def content_type(self):
        """
        Abstract property definition, must be implemented by all subclasses.
        """
        ...
    
    @property
    def default_ext(self):
        """
        Default filename extension for images of this type. An abstract
        property definition, must be implemented by all subclasses.
        """
        ...
    
    @property
    def px_width(self): # -> Unknown:
        """
        The horizontal pixel dimension of the image
        """
        ...
    
    @property
    def px_height(self): # -> Unknown:
        """
        The vertical pixel dimension of the image
        """
        ...
    
    @property
    def horz_dpi(self): # -> Unknown:
        """
        Integer dots per inch for the width of this image. Defaults to 72
        when not present in the file, as is often the case.
        """
        ...
    
    @property
    def vert_dpi(self): # -> Unknown:
        """
        Integer dots per inch for the height of this image. Defaults to 72
        when not present in the file, as is often the case.
        """
        ...
    


