"""
This type stub file was generated by pyright.
"""

from .image import BaseImageHeader

class Png(BaseImageHeader):
    """
    Image header parser for PNG images
    """
    @property
    def content_type(self): # -> Literal['image/png']:
        """
        MIME content type for this image, unconditionally `image/png` for
        PNG images.
        """
        ...
    
    @property
    def default_ext(self): # -> Literal['png']:
        """
        Default filename extension, always 'png' for PNG images.
        """
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@Png:
        """
        Return a |Png| instance having header properties parsed from image in
        *stream*.
        """
        ...
    


class _PngParser:
    """
    Parses a PNG image stream to extract the image properties found in its
    chunks.
    """
    def __init__(self, chunks) -> None:
        ...
    
    @classmethod
    def parse(cls, stream): # -> Self@_PngParser:
        """
        Return a |_PngParser| instance containing the header properties
        parsed from the PNG image in *stream*.
        """
        ...
    
    @property
    def px_width(self):
        """
        The number of pixels in each row of the image.
        """
        ...
    
    @property
    def px_height(self):
        """
        The number of stacked rows of pixels in the image.
        """
        ...
    
    @property
    def horz_dpi(self): # -> int:
        """
        Integer dots per inch for the width of this image. Defaults to 72
        when not present in the file, as is often the case.
        """
        ...
    
    @property
    def vert_dpi(self): # -> int:
        """
        Integer dots per inch for the height of this image. Defaults to 72
        when not present in the file, as is often the case.
        """
        ...
    


class _Chunks:
    """
    Collection of the chunks parsed from a PNG image stream
    """
    def __init__(self, chunk_iterable) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_Chunks:
        """
        Return a |_Chunks| instance containing the PNG chunks in *stream*.
        """
        ...
    
    @property
    def IHDR(self):
        """
        IHDR chunk in PNG image
        """
        ...
    
    @property
    def pHYs(self): # -> None:
        """
        pHYs chunk in PNG image, or |None| if not present
        """
        ...
    


class _ChunkParser:
    """
    Extracts chunks from a PNG image stream
    """
    def __init__(self, stream_rdr) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_ChunkParser:
        """
        Return a |_ChunkParser| instance that can extract the chunks from the
        PNG image in *stream*.
        """
        ...
    
    def iter_chunks(self): # -> Generator[Unknown | _Chunk, Any, None]:
        """
        Generate a |_Chunk| subclass instance for each chunk in this parser's
        PNG stream, in the order encountered in the stream.
        """
        ...
    


class _Chunk:
    """
    Base class for specific chunk types. Also serves as the default chunk
    type.
    """
    def __init__(self, chunk_type) -> None:
        ...
    
    @classmethod
    def from_offset(cls, chunk_type, stream_rdr, offset): # -> Self@_Chunk:
        """
        Return a default _Chunk instance that only knows its chunk type.
        """
        ...
    
    @property
    def type_name(self): # -> Unknown:
        """
        The chunk type name, e.g. 'IHDR', 'pHYs', etc.
        """
        ...
    


class _IHDRChunk(_Chunk):
    """
    IHDR chunk, contains the image dimensions
    """
    def __init__(self, chunk_type, px_width, px_height) -> None:
        ...
    
    @classmethod
    def from_offset(cls, chunk_type, stream_rdr, offset): # -> Self@_IHDRChunk:
        """
        Return an _IHDRChunk instance containing the image dimensions
        extracted from the IHDR chunk in *stream* at *offset*.
        """
        ...
    
    @property
    def px_width(self): # -> Unknown:
        ...
    
    @property
    def px_height(self): # -> Unknown:
        ...
    


class _pHYsChunk(_Chunk):
    """
    pYHs chunk, contains the image dpi information
    """
    def __init__(self, chunk_type, horz_px_per_unit, vert_px_per_unit, units_specifier) -> None:
        ...
    
    @classmethod
    def from_offset(cls, chunk_type, stream_rdr, offset): # -> Self@_pHYsChunk:
        """
        Return a _pHYsChunk instance containing the image resolution
        extracted from the pHYs chunk in *stream* at *offset*.
        """
        ...
    
    @property
    def horz_px_per_unit(self): # -> Unknown:
        ...
    
    @property
    def vert_px_per_unit(self): # -> Unknown:
        ...
    
    @property
    def units_specifier(self): # -> Unknown:
        ...
    


