"""
This type stub file was generated by pyright.
"""

BIG_ENDIAN = ...
LITTLE_ENDIAN = ...
class StreamReader:
    """
    Wraps a file-like object to provide access to structured data from a
    binary file. Byte-order is configurable. *base_offset* is added to any
    base value provided to calculate actual location for reads.
    """
    def __init__(self, stream, byte_order, base_offset=...) -> None:
        ...
    
    def read(self, count):
        """
        Allow pass-through read() call
        """
        ...
    
    def read_byte(self, base, offset=...): # -> Any:
        """
        Return the int value of the byte at the file position defined by
        self._base_offset + *base* + *offset*. If *base* is None, the byte is
        read from the current position in the stream.
        """
        ...
    
    def read_long(self, base, offset=...):
        """
        Return the int value of the four bytes at the file position defined by
        self._base_offset + *base* + *offset*. If *base* is None, the long is
        read from the current position in the stream. The endian setting of
        this instance is used to interpret the byte layout of the long.
        """
        ...
    
    def read_short(self, base, offset=...): # -> Any:
        """
        Return the int value of the two bytes at the file position determined
        by *base* and *offset*, similarly to ``read_long()`` above.
        """
        ...
    
    def read_str(self, char_count, base, offset=...): # -> Any:
        """
        Return a string containing the *char_count* bytes at the file
        position determined by self._base_offset + *base* + *offset*.
        """
        ...
    
    def seek(self, base, offset=...): # -> None:
        ...
    
    def tell(self):
        """
        Allow pass-through tell() call
        """
        ...
    


